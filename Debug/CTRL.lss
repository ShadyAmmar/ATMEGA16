
CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800066  00800066  00000a12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bef  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6b  00000000  00000000  000028b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00003322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00004328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00004810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000146b  00000000  00000000  00004cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 03 	call	0x7da	; 0x7da <main>
  8a:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vdDefaultPASSinit>:
#include <stdio.h>
#include <avr/io.h> //debugging
#include <util/delay.h>


void APP_vdDefaultPASSinit(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
// 	for(i=0;data != '\0';i++){
// 		EEPROM_u8ReadByte(u16Location++,&data);
// 		_delay_ms(100);
// 		LCD_vdWriteChar(data);
// 	}
	EEPROM_u8WriteString(ADDRESS_EEPROM,defaultPASS);
  a6:	60 e6       	ldi	r22, 0x60	; 96
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 28 02 	call	0x450	; 0x450 <EEPROM_u8WriteString>
	EEPROM_u8ReadString(ADDRESS_EEPROM,PASS);
  b2:	be 01       	movw	r22, r28
  b4:	6f 5f       	subi	r22, 0xFF	; 255
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
  b8:	80 e5       	ldi	r24, 0x50	; 80
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 65 02 	call	0x4ca	; 0x4ca <EEPROM_u8ReadString>
	//LCD_vdWriteString(PASS);
}
  c0:	2a 96       	adiw	r28, 0x0a	; 10
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <APP_vdDONE>:

void APP_vdDONE(){
	SPI_vdSendByte('D');
  d2:	84 e4       	ldi	r24, 0x44	; 68
  d4:	0e 94 32 04 	call	0x864	; 0x864 <SPI_vdSendByte>
  d8:	08 95       	ret

000000da <APP_vdCall>:
}

void APP_vdCall(){
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	2a 97       	sbiw	r28, 0x0a	; 10
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
	unsigned char msg,action;
	msg = SPI_u8Receive();
  fa:	0e 94 42 04 	call	0x884	; 0x884 <SPI_u8Receive>
	if(msg == 'A'){
  fe:	81 34       	cpi	r24, 0x41	; 65
 100:	09 f0       	breq	.+2      	; 0x104 <APP_vdCall+0x2a>
 102:	44 c0       	rjmp	.+136    	; 0x18c <APP_vdCall+0xb2>
		LEDtoggle('D',4);
 104:	64 e0       	ldi	r22, 0x04	; 4
 106:	84 e4       	ldi	r24, 0x44	; 68
 108:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LEDtoggle>
		action = SPI_u8Receive();
 10c:	0e 94 42 04 	call	0x884	; 0x884 <SPI_u8Receive>
		switch(action){
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	99 f0       	breq	.+38     	; 0x13a <APP_vdCall+0x60>
 114:	28 f4       	brcc	.+10     	; 0x120 <APP_vdCall+0x46>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	51 f0       	breq	.+20     	; 0x12e <APP_vdCall+0x54>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	59 f0       	breq	.+22     	; 0x134 <APP_vdCall+0x5a>
 11e:	36 c0       	rjmp	.+108    	; 0x18c <APP_vdCall+0xb2>
 120:	8b 30       	cpi	r24, 0x0B	; 11
 122:	89 f0       	breq	.+34     	; 0x146 <APP_vdCall+0x6c>
 124:	8c 30       	cpi	r24, 0x0C	; 12
 126:	91 f0       	breq	.+36     	; 0x14c <APP_vdCall+0x72>
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	81 f5       	brne	.+96     	; 0x18c <APP_vdCall+0xb2>
 12c:	09 c0       	rjmp	.+18     	; 0x140 <APP_vdCall+0x66>
			case LOCK:
				PORTD = LOCK;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	82 bb       	out	0x12, r24	; 18
				break;
 132:	2c c0       	rjmp	.+88     	; 0x18c <APP_vdCall+0xb2>
			case UNLOCK:
				PORTD = UNLOCK;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	82 bb       	out	0x12, r24	; 18
				break;
 138:	29 c0       	rjmp	.+82     	; 0x18c <APP_vdCall+0xb2>
			case LOCK_S:
				PORTD = LOCK_S;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	82 bb       	out	0x12, r24	; 18
				break;
 13e:	26 c0       	rjmp	.+76     	; 0x18c <APP_vdCall+0xb2>
			case CH_PASS:
				PORTD = CH_PASS;
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	82 bb       	out	0x12, r24	; 18
				break;
 144:	23 c0       	rjmp	.+70     	; 0x18c <APP_vdCall+0xb2>
			case WRONGPASS:
				PORTD = WRONGPASS;
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	82 bb       	out	0x12, r24	; 18
				break;
 14a:	20 c0       	rjmp	.+64     	; 0x18c <APP_vdCall+0xb2>
			case GETPASS:
				PORTD = GETPASS;
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	82 bb       	out	0x12, r24	; 18
				unsigned char password[10];
				unsigned char size; 
				size = EEPROM_u8ReadString(ADDRESS_EEPROM,password);
 150:	be 01       	movw	r22, r28
 152:	6f 5f       	subi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	80 e5       	ldi	r24, 0x50	; 80
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 65 02 	call	0x4ca	; 0x4ca <EEPROM_u8ReadString>
				for(int i=0;i<=size;i++){
 15e:	c8 2e       	mov	r12, r24
 160:	d1 2c       	mov	r13, r1
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	7c 01       	movw	r14, r24
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	10 e0       	ldi	r17, 0x00	; 0
					SPI_vdSendByte(password[i]);
 16c:	f7 01       	movw	r30, r14
 16e:	81 91       	ld	r24, Z+
 170:	7f 01       	movw	r14, r30
 172:	0e 94 32 04 	call	0x864	; 0x864 <SPI_vdSendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f ec       	ldi	r24, 0xCF	; 207
 178:	97 e0       	ldi	r25, 0x07	; 7
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <APP_vdCall+0xa0>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <APP_vdCall+0xa6>
 180:	00 00       	nop
			case GETPASS:
				PORTD = GETPASS;
				unsigned char password[10];
				unsigned char size; 
				size = EEPROM_u8ReadString(ADDRESS_EEPROM,password);
				for(int i=0;i<=size;i++){
 182:	0f 5f       	subi	r16, 0xFF	; 255
 184:	1f 4f       	sbci	r17, 0xFF	; 255
 186:	c0 16       	cp	r12, r16
 188:	d1 06       	cpc	r13, r17
 18a:	84 f7       	brge	.-32     	; 0x16c <APP_vdCall+0x92>
					_delay_ms(1);
				}
				break;
		}
	}
	LEDtoggle('D',4);
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	84 e4       	ldi	r24, 0x44	; 68
 190:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LEDtoggle>
}
 194:	2a 96       	adiw	r28, 0x0a	; 10
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	cf 90       	pop	r12
 1b0:	08 95       	ret

000001b2 <DIO_vdInit>:
			return (PINC & (1<<pin))?1:0;
		case 'D':
			return (PIND & (1<<pin))?1:0;
	}
	return 0;
}
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	94 bb       	out	0x14, r25	; 20
 1b6:	15 ba       	out	0x15, r1	; 21
 1b8:	80 ef       	ldi	r24, 0xF0	; 240
 1ba:	8a bb       	out	0x1a, r24	; 26
 1bc:	1b ba       	out	0x1b, r1	; 27
 1be:	87 b3       	in	r24, 0x17	; 23
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	87 bb       	out	0x17, r24	; 23
 1c4:	91 bb       	out	0x11, r25	; 17
 1c6:	12 ba       	out	0x12, r1	; 18
 1c8:	08 95       	ret

000001ca <DIO_u8ReadPort>:

unsigned char DIO_u8ReadPort(unsigned char port){
	switch(port){
 1ca:	82 34       	cpi	r24, 0x42	; 66
 1cc:	59 f0       	breq	.+22     	; 0x1e4 <DIO_u8ReadPort+0x1a>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <DIO_u8ReadPort+0xc>
 1d0:	81 34       	cpi	r24, 0x41	; 65
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <DIO_u8ReadPort+0x16>
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <DIO_u8ReadPort+0x26>
 1d6:	83 34       	cpi	r24, 0x43	; 67
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <DIO_u8ReadPort+0x1e>
 1da:	84 34       	cpi	r24, 0x44	; 68
 1dc:	39 f0       	breq	.+14     	; 0x1ec <DIO_u8ReadPort+0x22>
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <DIO_u8ReadPort+0x26>
		case 'A':
		return (PINA);
 1e0:	89 b3       	in	r24, 0x19	; 25
 1e2:	08 95       	ret
		case 'B':
		return (PINB);
 1e4:	86 b3       	in	r24, 0x16	; 22
 1e6:	08 95       	ret
		case 'C':
		return (PINC);
 1e8:	83 b3       	in	r24, 0x13	; 19
 1ea:	08 95       	ret
		case 'D':
		return (PIND);
 1ec:	80 b3       	in	r24, 0x10	; 16
 1ee:	08 95       	ret
	}
	return 0;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
}
 1f2:	08 95       	ret

000001f4 <DIO_vdWritePin>:

void DIO_vdWritePin(unsigned char data,unsigned char port,unsigned char pin){
	switch(port){
 1f4:	62 34       	cpi	r22, 0x42	; 66
 1f6:	19 f1       	breq	.+70     	; 0x23e <DIO_vdWritePin+0x4a>
 1f8:	18 f4       	brcc	.+6      	; 0x200 <DIO_vdWritePin+0xc>
 1fa:	61 34       	cpi	r22, 0x41	; 65
 1fc:	39 f0       	breq	.+14     	; 0x20c <DIO_vdWritePin+0x18>
 1fe:	08 95       	ret
 200:	63 34       	cpi	r22, 0x43	; 67
 202:	b1 f1       	breq	.+108    	; 0x270 <DIO_vdWritePin+0x7c>
 204:	64 34       	cpi	r22, 0x44	; 68
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_vdWritePin+0x16>
 208:	4c c0       	rjmp	.+152    	; 0x2a2 <DIO_vdWritePin+0xae>
 20a:	08 95       	ret
		case 'A':
			if(data){
 20c:	88 23       	and	r24, r24
 20e:	59 f0       	breq	.+22     	; 0x226 <DIO_vdWritePin+0x32>
				PORTA |= (1<<pin); 
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_vdWritePin+0x28>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	4a 95       	dec	r20
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_vdWritePin+0x24>
 220:	82 2b       	or	r24, r18
 222:	8b bb       	out	0x1b, r24	; 27
 224:	08 95       	ret
			}else{
				PORTA &= ~(1<<pin);
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_vdWritePin+0x3e>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	4a 95       	dec	r20
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_vdWritePin+0x3a>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
			}
			break;
		case 'B':
			if(data){
 23e:	88 23       	and	r24, r24
 240:	59 f0       	breq	.+22     	; 0x258 <DIO_vdWritePin+0x64>
				PORTB |= (1<<pin);
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_vdWritePin+0x5a>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	4a 95       	dec	r20
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_vdWritePin+0x56>
 252:	82 2b       	or	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	08 95       	ret
				}else{
				PORTB &= ~(1<<pin);
 258:	28 b3       	in	r18, 0x18	; 24
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_vdWritePin+0x70>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	4a 95       	dec	r20
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_vdWritePin+0x6c>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	08 95       	ret
			}
			break;
		case 'C':
			if(data){
 270:	88 23       	and	r24, r24
 272:	59 f0       	breq	.+22     	; 0x28a <DIO_vdWritePin+0x96>
				PORTC |= (1<<pin);
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_vdWritePin+0x8c>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	4a 95       	dec	r20
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_vdWritePin+0x88>
 284:	82 2b       	or	r24, r18
 286:	85 bb       	out	0x15, r24	; 21
 288:	08 95       	ret
				}else{
				PORTC &= ~(1<<pin);
 28a:	25 b3       	in	r18, 0x15	; 21
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_vdWritePin+0xa2>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	4a 95       	dec	r20
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_vdWritePin+0x9e>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	85 bb       	out	0x15, r24	; 21
 2a0:	08 95       	ret
			}
			break;
		case 'D':
			if(data){
 2a2:	88 23       	and	r24, r24
 2a4:	59 f0       	breq	.+22     	; 0x2bc <DIO_vdWritePin+0xc8>
				PORTD |= (1<<pin);
 2a6:	22 b3       	in	r18, 0x12	; 18
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_vdWritePin+0xbe>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	4a 95       	dec	r20
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_vdWritePin+0xba>
 2b6:	82 2b       	or	r24, r18
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	08 95       	ret
				}else{
				PORTD &= ~(1<<pin);
 2bc:	22 b3       	in	r18, 0x12	; 18
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vdWritePin+0xd4>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	4a 95       	dec	r20
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vdWritePin+0xd0>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	82 bb       	out	0x12, r24	; 18
 2d2:	08 95       	ret

000002d4 <DIO_vdWritePort>:
			break;
	}
}

void DIO_vdWritePort(unsigned char data,unsigned char port){
	switch(port){
 2d4:	62 34       	cpi	r22, 0x42	; 66
 2d6:	79 f0       	breq	.+30     	; 0x2f6 <DIO_vdWritePort+0x22>
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <DIO_vdWritePort+0xc>
 2da:	61 34       	cpi	r22, 0x41	; 65
 2dc:	31 f0       	breq	.+12     	; 0x2ea <DIO_vdWritePort+0x16>
 2de:	08 95       	ret
 2e0:	63 34       	cpi	r22, 0x43	; 67
 2e2:	79 f0       	breq	.+30     	; 0x302 <DIO_vdWritePort+0x2e>
 2e4:	64 34       	cpi	r22, 0x44	; 68
 2e6:	99 f0       	breq	.+38     	; 0x30e <DIO_vdWritePort+0x3a>
 2e8:	08 95       	ret
		case 'A':
			if(data){
 2ea:	88 23       	and	r24, r24
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <DIO_vdWritePort+0x1e>
				PORTA = data;
 2ee:	8b bb       	out	0x1b, r24	; 27
 2f0:	08 95       	ret
			}else{
				PORTA = 0;
 2f2:	1b ba       	out	0x1b, r1	; 27
 2f4:	08 95       	ret
			}
			break;
		case 'B':
			if(data){
 2f6:	88 23       	and	r24, r24
 2f8:	11 f0       	breq	.+4      	; 0x2fe <DIO_vdWritePort+0x2a>
				PORTB = data;
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	08 95       	ret
			}else{
				PORTB = 0;
 2fe:	18 ba       	out	0x18, r1	; 24
 300:	08 95       	ret
			}
			break;
		case 'C':
			if(data){
 302:	88 23       	and	r24, r24
 304:	11 f0       	breq	.+4      	; 0x30a <DIO_vdWritePort+0x36>
				PORTC = data;
 306:	85 bb       	out	0x15, r24	; 21
 308:	08 95       	ret
			}else{
				PORTC = 0;
 30a:	15 ba       	out	0x15, r1	; 21
 30c:	08 95       	ret
			}
			break;
		case 'D':
			if(data){
 30e:	88 23       	and	r24, r24
 310:	11 f0       	breq	.+4      	; 0x316 <DIO_vdWritePort+0x42>
				PORTD = data;
 312:	82 bb       	out	0x12, r24	; 18
 314:	08 95       	ret
			}else{
				PORTD = 0;
 316:	12 ba       	out	0x12, r1	; 18
 318:	08 95       	ret

0000031a <EEPROM_vdInit>:
#include <stdio.h>	//debug
#include "LCD.h"	//debug
unsigned char x;

void EEPROM_vdInit (){
	TWI_vdInit() ;
 31a:	0e 94 8f 04 	call	0x91e	; 0x91e <TWI_vdInit>
 31e:	08 95       	ret

00000320 <EEPROM_u8WriteByte>:
}

//u16Location: A2,A1,A0,--8bit addr--
unsigned char EEPROM_u8WriteByte (int u16Location , unsigned char u8Data){
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
 328:	16 2f       	mov	r17, r22
	TWI_vdSendStart() ;											//Send Start bit
 32a:	0e 94 99 04 	call	0x932	; 0x932 <TWI_vdSendStart>
	if (TWI_u8CheckStatus(Start)==True)							//if start transmitted successfully
 32e:	88 e0       	ldi	r24, 0x08	; 8
 330:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	31 f5       	brne	.+76     	; 0x384 <EEPROM_u8WriteByte+0x64>
	{
		x = 0xA0 ;												//EEPROM addr
		x |= ((u16Location&0x0700)>>7) ;						//addr + mask A2,A1,A0 + zero(for Write)
 338:	9e 01       	movw	r18, r28
 33a:	22 27       	eor	r18, r18
 33c:	37 70       	andi	r19, 0x07	; 7
 33e:	22 0f       	add	r18, r18
 340:	23 2f       	mov	r18, r19
 342:	22 1f       	adc	r18, r18
 344:	33 0b       	sbc	r19, r19
 346:	82 2f       	mov	r24, r18
 348:	80 6a       	ori	r24, 0xA0	; 160
 34a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <x>
		TWI_vdWrite(x) ;										//Sending: 1010(EEPROM addr)+A2,A1,A0(page addr)+zero(write)
 34e:	0e 94 a2 04 	call	0x944	; 0x944 <TWI_vdWrite>
		if (TWI_u8CheckStatus(SLA_W_ACK_MT)==True)					//if addr+W/R transmitted successfully
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	b1 f4       	brne	.+44     	; 0x388 <EEPROM_u8WriteByte+0x68>
		{
			TWI_vdWrite((unsigned char) u16Location) ;			//send address of word in the page (considered data)
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 a2 04 	call	0x944	; 0x944 <TWI_vdWrite>
			if (TWI_u8CheckStatus(DataACK_MT)==True)				//if data transmitted successfully
 362:	88 e2       	ldi	r24, 0x28	; 40
 364:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	81 f4       	brne	.+32     	; 0x38c <EEPROM_u8WriteByte+0x6c>
			{
				TWI_vdWrite(u8Data) ;							//send data to save in EEPROM
 36c:	81 2f       	mov	r24, r17
 36e:	0e 94 a2 04 	call	0x944	; 0x944 <TWI_vdWrite>
				if (TWI_u8CheckStatus(DataACK_MT)==True)			//if data transmitted successfully	
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 378:	c8 2f       	mov	r28, r24
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	49 f4       	brne	.+18     	; 0x390 <EEPROM_u8WriteByte+0x70>
				{
					TWI_vdSendStop() ;							//send STOP
 37e:	0e 94 9f 04 	call	0x93e	; 0x93e <TWI_vdSendStop>
					return True ;								//return True to indicate succ. write in EEPROM
 382:	07 c0       	rjmp	.+14     	; 0x392 <EEPROM_u8WriteByte+0x72>
				}
				
			}
		}
	}
	return False ;
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	05 c0       	rjmp	.+10     	; 0x392 <EEPROM_u8WriteByte+0x72>
 388:	c0 e0       	ldi	r28, 0x00	; 0
 38a:	03 c0       	rjmp	.+6      	; 0x392 <EEPROM_u8WriteByte+0x72>
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	01 c0       	rjmp	.+2      	; 0x392 <EEPROM_u8WriteByte+0x72>
 390:	c0 e0       	ldi	r28, 0x00	; 0
}
 392:	8c 2f       	mov	r24, r28
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	08 95       	ret

0000039c <EEPROM_u8ReadByte>:


unsigned char EEPROM_u8ReadByte(int u16Location , unsigned char *ptr){
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	8c 01       	movw	r16, r24
 3a8:	7b 01       	movw	r14, r22
	TWI_vdSendStart() ;											//Send Start bit
 3aa:	0e 94 99 04 	call	0x932	; 0x932 <TWI_vdSendStart>
	if (TWI_u8CheckStatus(Start)==True)							//if start transmitted successfully
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	d1 f5       	brne	.+116    	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
	{
		x = 0xA0 ;												//EEPROM addr
		x |= ((u16Location&0x0700)>>7) ;						//addr + mask A2,A1,A0 + zero(for Write)
 3b8:	98 01       	movw	r18, r16
 3ba:	22 27       	eor	r18, r18
 3bc:	37 70       	andi	r19, 0x07	; 7
 3be:	22 0f       	add	r18, r18
 3c0:	23 2f       	mov	r18, r19
 3c2:	22 1f       	adc	r18, r18
 3c4:	33 0b       	sbc	r19, r19
 3c6:	c2 2f       	mov	r28, r18
 3c8:	c0 6a       	ori	r28, 0xA0	; 160
 3ca:	c0 93 74 00 	sts	0x0074, r28	; 0x800074 <x>
		TWI_vdWrite(x) ;										//Sending: 1010(EEPROM addr)+A2,A1,A0(page addr)+zero(write)
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 a2 04 	call	0x944	; 0x944 <TWI_vdWrite>
		if (TWI_u8CheckStatus(SLA_W_ACK_MT)==True)					//if addr+W/R transmitted successfully
 3d4:	88 e1       	ldi	r24, 0x18	; 24
 3d6:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	49 f5       	brne	.+82     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
		{
			TWI_vdWrite((unsigned char) u16Location) ;			//send address of word in the page (considered data)
 3de:	80 2f       	mov	r24, r16
 3e0:	0e 94 a2 04 	call	0x944	; 0x944 <TWI_vdWrite>
			if (TWI_u8CheckStatus(DataACK_MT)==True)				//if data transmitted successfully
 3e4:	88 e2       	ldi	r24, 0x28	; 40
 3e6:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	19 f5       	brne	.+70     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
			{
				TWI_vdSendStart() ;								//Send Repeated Start to commun. again with EEPROM to receive
 3ee:	0e 94 99 04 	call	0x932	; 0x932 <TWI_vdSendStart>
				if (TWI_u8CheckStatus(RStart)==True)			//if repeated start transmitted successfully
 3f2:	80 e1       	ldi	r24, 0x10	; 16
 3f4:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	f1 f4       	brne	.+60     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
				{
					x = 0xA0 ;									//EEPROM addr		
					x|= ((u16Location&0x0700)>>7) ;				//addr + mask A2,A1,A0 + zero
					x |= READ;									//addr + mask A2,A1,A0 + 1(to Read)
 3fc:	8c 2f       	mov	r24, r28
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <x>
					TWI_vdWrite(x) ;							//sending addr
 404:	0e 94 a2 04 	call	0x944	; 0x944 <TWI_vdWrite>
					if (TWI_u8CheckStatus(SLA_R_ACK_MR)==True)		//if 
 408:	80 e4       	ldi	r24, 0x40	; 64
 40a:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	a9 f4       	brne	.+42     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
					{
						*ptr = TWI_u8ReadwithNoAck() ;
 412:	0e 94 b0 04 	call	0x960	; 0x960 <TWI_u8ReadwithNoAck>
 416:	f7 01       	movw	r30, r14
 418:	80 83       	st	Z, r24
						if (TWI_u8CheckStatus(DataNACK_MR)==True)
 41a:	88 e5       	ldi	r24, 0x58	; 88
 41c:	0e 94 a9 04 	call	0x952	; 0x952 <TWI_u8CheckStatus>
 420:	c8 2f       	mov	r28, r24
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	69 f4       	brne	.+26     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
						{
							TWI_vdSendStop() ;
 426:	0e 94 9f 04 	call	0x93e	; 0x93e <TWI_vdSendStop>
							return True ;
 42a:	0b c0       	rjmp	.+22     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
				}
				
			}
		}
	}
	return False ;
 42c:	c0 e0       	ldi	r28, 0x00	; 0
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 430:	c0 e0       	ldi	r28, 0x00	; 0
 432:	07 c0       	rjmp	.+14     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 434:	c0 e0       	ldi	r28, 0x00	; 0
 436:	05 c0       	rjmp	.+10     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 438:	c0 e0       	ldi	r28, 0x00	; 0
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 440:	c0 e0       	ldi	r28, 0x00	; 0
}
 442:	8c 2f       	mov	r24, r28
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	08 95       	ret

00000450 <EEPROM_u8WriteString>:

unsigned char EEPROM_u8WriteString (int u16Location , char* data){
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	eb 01       	movw	r28, r22
	int i;
	for(i=0;data[i]!='\0';i++){
 45e:	68 81       	ld	r22, Y
 460:	66 23       	and	r22, r22
 462:	d9 f0       	breq	.+54     	; 0x49a <__stack+0x3b>
 464:	21 96       	adiw	r28, 0x01	; 1
 466:	00 e0       	ldi	r16, 0x00	; 0
 468:	10 e0       	ldi	r17, 0x00	; 0
		if(!EEPROM_u8WriteByte( u16Location++ , data[i])) return False;
 46a:	7c 01       	movw	r14, r24
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	e2 1a       	sub	r14, r18
 470:	f2 0a       	sbc	r15, r18
 472:	0e 94 90 01 	call	0x320	; 0x320 <EEPROM_u8WriteByte>
 476:	88 23       	and	r24, r24
 478:	09 f1       	breq	.+66     	; 0x4bc <__stack+0x5d>
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	90 e7       	ldi	r25, 0x70	; 112
 47e:	22 e0       	ldi	r18, 0x02	; 2
 480:	81 50       	subi	r24, 0x01	; 1
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	20 40       	sbci	r18, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__stack+0x21>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__stack+0x2b>
 48a:	00 00       	nop
	return False ;
}

unsigned char EEPROM_u8WriteString (int u16Location , char* data){
	int i;
	for(i=0;data[i]!='\0';i++){
 48c:	0f 5f       	subi	r16, 0xFF	; 255
 48e:	1f 4f       	sbci	r17, 0xFF	; 255
 490:	69 91       	ld	r22, Y+
		if(!EEPROM_u8WriteByte( u16Location++ , data[i])) return False;
 492:	c7 01       	movw	r24, r14
	return False ;
}

unsigned char EEPROM_u8WriteString (int u16Location , char* data){
	int i;
	for(i=0;data[i]!='\0';i++){
 494:	61 11       	cpse	r22, r1
 496:	e9 cf       	rjmp	.-46     	; 0x46a <__stack+0xb>
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <__stack+0x41>
 49a:	7c 01       	movw	r14, r24
 49c:	00 e0       	ldi	r16, 0x00	; 0
 49e:	10 e0       	ldi	r17, 0x00	; 0
		if(!EEPROM_u8WriteByte( u16Location++ , data[i])) return False;
		_delay_ms(100);
	}
	EEPROM_u8WriteByte( u16Location , data[i]);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	c7 01       	movw	r24, r14
 4a4:	0e 94 90 01 	call	0x320	; 0x320 <EEPROM_u8WriteByte>
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	90 e7       	ldi	r25, 0x70	; 112
 4ac:	22 e0       	ldi	r18, 0x02	; 2
 4ae:	81 50       	subi	r24, 0x01	; 1
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	20 40       	sbci	r18, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__stack+0x4f>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__stack+0x59>
 4b8:	00 00       	nop
	_delay_ms(100);
	return i;
 4ba:	80 2f       	mov	r24, r16
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	08 95       	ret

000004ca <EEPROM_u8ReadString>:

unsigned char EEPROM_u8ReadString(int u16Location , unsigned char* ptr){
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	6c 01       	movw	r12, r24
 4dc:	eb 01       	movw	r28, r22
	unsigned char data = 1; int i=0;
 4de:	00 e0       	ldi	r16, 0x00	; 0
 4e0:	10 e0       	ldi	r17, 0x00	; 0
	while(data != '\0'){
		if(!EEPROM_u8ReadByte(u16Location++,&ptr[i])) return False; 
 4e2:	7e 01       	movw	r14, r28
 4e4:	be 01       	movw	r22, r28
 4e6:	c8 01       	movw	r24, r16
 4e8:	8c 0d       	add	r24, r12
 4ea:	9d 1d       	adc	r25, r13
 4ec:	0e 94 ce 01 	call	0x39c	; 0x39c <EEPROM_u8ReadByte>
 4f0:	88 23       	and	r24, r24
 4f2:	49 f0       	breq	.+18     	; 0x506 <EEPROM_u8ReadString+0x3c>
 4f4:	21 96       	adiw	r28, 0x01	; 1
		data = ptr[i];
		i++;
 4f6:	0f 5f       	subi	r16, 0xFF	; 255
 4f8:	1f 4f       	sbci	r17, 0xFF	; 255
	return i;
}

unsigned char EEPROM_u8ReadString(int u16Location , unsigned char* ptr){
	unsigned char data = 1; int i=0;
	while(data != '\0'){
 4fa:	f7 01       	movw	r30, r14
 4fc:	90 81       	ld	r25, Z
 4fe:	91 11       	cpse	r25, r1
 500:	f0 cf       	rjmp	.-32     	; 0x4e2 <EEPROM_u8ReadString+0x18>
		if(!EEPROM_u8ReadByte(u16Location++,&ptr[i])) return False; 
		data = ptr[i];
		i++;
	}
	return (i-1);
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	80 0f       	add	r24, r16
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	cf 90       	pop	r12
 516:	08 95       	ret

00000518 <LCD_vdSendCom>:
#define F_CPU 8000000ul
#include "util/delay.h"
#include <avr/io.h>	//debug
static unsigned char mode = 0;

void LCD_vdSendCom(unsigned char command){
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24
	switch(mode){
 51c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
 520:	99 23       	and	r25, r25
 522:	19 f0       	breq	.+6      	; 0x52a <LCD_vdSendCom+0x12>
 524:	91 30       	cpi	r25, 0x01	; 1
 526:	31 f1       	breq	.+76     	; 0x574 <LCD_vdSendCom+0x5c>
 528:	71 c0       	rjmp	.+226    	; 0x60c <LCD_vdSendCom+0xf4>
		case MODE_8_BITS:
		DIO_vdWritePin(0,'B',0);        //reset the EN=0
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	62 e4       	ldi	r22, 0x42	; 66
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
		DIO_vdWritePort(command,'A');	//writing the command
 534:	61 e4       	ldi	r22, 0x41	; 65
 536:	8c 2f       	mov	r24, r28
 538:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_vdWritePort>
		DIO_vdWritePin(0,'B',1);		//set the R/S=0 for command
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	62 e4       	ldi	r22, 0x42	; 66
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
		DIO_vdWritePin(1,'B',0);        //set the EN=1
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	62 e4       	ldi	r22, 0x42	; 66
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 550:	8f ec       	ldi	r24, 0xCF	; 207
 552:	97 e0       	ldi	r25, 0x07	; 7
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <LCD_vdSendCom+0x3c>
 558:	00 c0       	rjmp	.+0      	; 0x55a <LCD_vdSendCom+0x42>
 55a:	00 00       	nop
		_delay_ms(1);					//wait at least 450ns
		DIO_vdWritePin(0,'B',0);        //reset the EN=0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	62 e4       	ldi	r22, 0x42	; 66
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 566:	8f ed       	ldi	r24, 0xDF	; 223
 568:	9e e2       	ldi	r25, 0x2E	; 46
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_vdSendCom+0x52>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_vdSendCom+0x58>
 570:	00 00       	nop
 572:	4c c0       	rjmp	.+152    	; 0x60c <LCD_vdSendCom+0xf4>
		_delay_ms(6);					//Wait 5ms for command writes, and 200us for data writes
		break;
		
		case MODE_4_BITS:
		DIO_vdWritePin(0,'B',0);			//reset the EN=0
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	62 e4       	ldi	r22, 0x42	; 66
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
		DIO_vdWritePort((DIO_u8ReadPort('A') & 0x0F) | (command & 0xF0),'A');//Write the HIGHBYTE of data on (D7:4)
 57e:	81 e4       	ldi	r24, 0x41	; 65
 580:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_u8ReadPort>
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	9c 2f       	mov	r25, r28
 588:	90 7f       	andi	r25, 0xF0	; 240
 58a:	61 e4       	ldi	r22, 0x41	; 65
 58c:	89 2b       	or	r24, r25
 58e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_vdWritePort>
		DIO_vdWritePin(0,'B',1);			//set the R/S=0 for commands
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	62 e4       	ldi	r22, 0x42	; 66
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
		DIO_vdWritePin(1,'B',0);			//set the EN=1
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	62 e4       	ldi	r22, 0x42	; 66
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 5a6:	8f ec       	ldi	r24, 0xCF	; 207
 5a8:	97 e0       	ldi	r25, 0x07	; 7
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_vdSendCom+0x92>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <LCD_vdSendCom+0x98>
 5b0:	00 00       	nop
		_delay_ms(1);						//wait at least 450ns
		DIO_vdWritePin(0,'B',0);			//reset the EN=0
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	62 e4       	ldi	r22, 0x42	; 66
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 5bc:	8f ed       	ldi	r24, 0xDF	; 223
 5be:	9e e2       	ldi	r25, 0x2E	; 46
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_vdSendCom+0xa8>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCD_vdSendCom+0xae>
 5c6:	00 00       	nop
		_delay_ms(6);						//Wait 5ms for command writes, and 200us for data writes.
		
		DIO_vdWritePort((DIO_u8ReadPort('A') & 0x0F) | (command << 4),'A');	//Write the LOWBYTE of data on (D7:4)
 5c8:	81 e4       	ldi	r24, 0x41	; 65
 5ca:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_u8ReadPort>
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	90 e1       	ldi	r25, 0x10	; 16
 5d2:	c9 9f       	mul	r28, r25
 5d4:	90 01       	movw	r18, r0
 5d6:	11 24       	eor	r1, r1
 5d8:	61 e4       	ldi	r22, 0x41	; 65
 5da:	82 2b       	or	r24, r18
 5dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_vdWritePort>
		DIO_vdWritePin(1,'B',0);			//set the EN=1
 5e0:	40 e0       	ldi	r20, 0x00	; 0
 5e2:	62 e4       	ldi	r22, 0x42	; 66
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 5ea:	8f ec       	ldi	r24, 0xCF	; 207
 5ec:	97 e0       	ldi	r25, 0x07	; 7
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_vdSendCom+0xd6>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_vdSendCom+0xdc>
 5f4:	00 00       	nop
		_delay_ms(1);						//wait at least 450ns
		DIO_vdWritePin(0,'B',0);			//reset the EN=0
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	62 e4       	ldi	r22, 0x42	; 66
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 600:	8f ed       	ldi	r24, 0xDF	; 223
 602:	9e e2       	ldi	r25, 0x2E	; 46
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <LCD_vdSendCom+0xec>
 608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_vdSendCom+0xf2>
 60a:	00 00       	nop
		_delay_ms(6);						//Wait 5ms for command writes, and 200us for data writes.
		break;
	}
}
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <LCD_vdInit>:
 610:	ef e3       	ldi	r30, 0x3F	; 63
 612:	fc e9       	ldi	r31, 0x9C	; 156
 614:	31 97       	sbiw	r30, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_vdInit+0x4>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_vdInit+0xa>
 61a:	00 00       	nop

void LCD_vdInit(unsigned char MODE){
	_delay_ms(20);
	mode = MODE;
 61c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
	switch(mode){
 620:	88 23       	and	r24, r24
 622:	19 f0       	breq	.+6      	; 0x62a <LCD_vdInit+0x1a>
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	d1 f0       	breq	.+52     	; 0x65c <LCD_vdInit+0x4c>
 628:	08 95       	ret
		case MODE_8_BITS:
		LCD_vdSendCom(0x30);								/* send for 8 bit initialization of LCD  */
 62a:	80 e3       	ldi	r24, 0x30	; 48
 62c:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(BIT8_2LINES_5_7FONT);					/* 2 line, 5*7 matrix in 8-bit mode */
 630:	88 e3       	ldi	r24, 0x38	; 56
 632:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(DISPLAY_ON_CURSOR_ON_BLINK_OFF);		/* Display on - cursor on - blinking off */
 636:	8e e0       	ldi	r24, 0x0E	; 14
 638:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(SHIFT_CURSOR_ON_SHIFT_DISPLAY_OFF);   /* Increment cursor (shift cursor to right)*/
 63c:	86 e0       	ldi	r24, 0x06	; 6
 63e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(CLEAR_HOME);							/* Clear display screen*/
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
 648:	8f e9       	ldi	r24, 0x9F	; 159
 64a:	9f e0       	ldi	r25, 0x0F	; 15
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <LCD_vdInit+0x3c>
 650:	00 c0       	rjmp	.+0      	; 0x652 <LCD_vdInit+0x42>
 652:	00 00       	nop
		_delay_ms(2);										/* Clear display command delay> 1.63 ms */
		LCD_vdSendCom(LCD_ROW_1);							/* Cursor at home position */
 654:	80 e8       	ldi	r24, 0x80	; 128
 656:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		break;
 65a:	08 95       	ret
		
		case MODE_4_BITS:
		LCD_vdSendCom(0x02);								/* send for 4 bit initialization of LCD  */
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(BIT4_2LINES_5_7FONT);					/* 2 line, 5*7 matrix in 4-bit mode */
 662:	88 e2       	ldi	r24, 0x28	; 40
 664:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(DISPLAY_ON_CURSOR_ON_BLINK_OFF);		/* Display on - cursor on - blinking off */
 668:	8e e0       	ldi	r24, 0x0E	; 14
 66a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(SHIFT_CURSOR_ON_SHIFT_DISPLAY_OFF);   /* Increment cursor (shift cursor to right)*/
 66e:	86 e0       	ldi	r24, 0x06	; 6
 670:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
		LCD_vdSendCom(CLEAR_HOME);							/* Clear display screen*/
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
 67a:	ef e9       	ldi	r30, 0x9F	; 159
 67c:	ff e0       	ldi	r31, 0x0F	; 15
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <LCD_vdInit+0x6e>
 682:	00 c0       	rjmp	.+0      	; 0x684 <LCD_vdInit+0x74>
 684:	00 00       	nop
		_delay_ms(2);										/* Clear display command delay> 1.63 ms */
		LCD_vdSendCom(LCD_ROW_1);							/* Cursor at home position */
 686:	80 e8       	ldi	r24, 0x80	; 128
 688:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_vdSendCom>
 68c:	08 95       	ret

0000068e <LCD_vdWriteChar>:
	}
}


void LCD_vdWriteChar(unsigned char data)
{
 68e:	cf 93       	push	r28
 690:	c8 2f       	mov	r28, r24
	switch(mode){
 692:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
 696:	99 23       	and	r25, r25
 698:	19 f0       	breq	.+6      	; 0x6a0 <LCD_vdWriteChar+0x12>
 69a:	91 30       	cpi	r25, 0x01	; 1
 69c:	31 f1       	breq	.+76     	; 0x6ea <LCD_vdWriteChar+0x5c>
 69e:	71 c0       	rjmp	.+226    	; 0x782 <LCD_vdWriteChar+0xf4>
		case MODE_8_BITS:
			DIO_vdWritePin(0,'B',0);        //reset the EN=0
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	62 e4       	ldi	r22, 0x42	; 66
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
			DIO_vdWritePort(data,'A');		//writing the data
 6aa:	61 e4       	ldi	r22, 0x41	; 65
 6ac:	8c 2f       	mov	r24, r28
 6ae:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_vdWritePort>
			DIO_vdWritePin(1,'B',1);		//set the R/S=1 for data
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	62 e4       	ldi	r22, 0x42	; 66
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
			DIO_vdWritePin(1,'B',0);        //set the EN=1
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	62 e4       	ldi	r22, 0x42	; 66
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 6c6:	8f ec       	ldi	r24, 0xCF	; 207
 6c8:	97 e0       	ldi	r25, 0x07	; 7
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_vdWriteChar+0x3c>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_vdWriteChar+0x42>
 6d0:	00 00       	nop
			_delay_ms(1);					//wait at least 450ns
			DIO_vdWritePin(0,'B',0);        //reset the EN=0
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	62 e4       	ldi	r22, 0x42	; 66
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 6dc:	8f ec       	ldi	r24, 0xCF	; 207
 6de:	97 e0       	ldi	r25, 0x07	; 7
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_vdWriteChar+0x52>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_vdWriteChar+0x58>
 6e6:	00 00       	nop
 6e8:	4c c0       	rjmp	.+152    	; 0x782 <LCD_vdWriteChar+0xf4>
			_delay_ms(1);					//Wait 5ms for command writes, and 200us for data writes.			
			break;
			
		case MODE_4_BITS:
			DIO_vdWritePin(0,'B',0);			//reset the EN=0
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	62 e4       	ldi	r22, 0x42	; 66
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
			DIO_vdWritePort((DIO_u8ReadPort('A') & 0x0F) | (data & 0xF0),'A');	//Write the HIGHBYTEof data on (D7:4)
 6f4:	81 e4       	ldi	r24, 0x41	; 65
 6f6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_u8ReadPort>
 6fa:	8f 70       	andi	r24, 0x0F	; 15
 6fc:	9c 2f       	mov	r25, r28
 6fe:	90 7f       	andi	r25, 0xF0	; 240
 700:	61 e4       	ldi	r22, 0x41	; 65
 702:	89 2b       	or	r24, r25
 704:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_vdWritePort>
			DIO_vdWritePin(1,'B',1);			//set the R/S=1 for data
 708:	41 e0       	ldi	r20, 0x01	; 1
 70a:	62 e4       	ldi	r22, 0x42	; 66
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
			DIO_vdWritePin(1,'B',0);			//set the EN=1
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	62 e4       	ldi	r22, 0x42	; 66
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 71c:	8f ec       	ldi	r24, 0xCF	; 207
 71e:	97 e0       	ldi	r25, 0x07	; 7
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <LCD_vdWriteChar+0x92>
 724:	00 c0       	rjmp	.+0      	; 0x726 <LCD_vdWriteChar+0x98>
 726:	00 00       	nop
			_delay_ms(1);						//wait at least 450ns
			DIO_vdWritePin(0,'B',0);			//reset the EN=0
 728:	40 e0       	ldi	r20, 0x00	; 0
 72a:	62 e4       	ldi	r22, 0x42	; 66
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 732:	8f ec       	ldi	r24, 0xCF	; 207
 734:	97 e0       	ldi	r25, 0x07	; 7
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <LCD_vdWriteChar+0xa8>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_vdWriteChar+0xae>
 73c:	00 00       	nop
			_delay_ms(1);						//Wait 5ms for command writes, and 200us for data writes.
			DIO_vdWritePin(1,'B',0);			//set the EN=1 (not written in datasheet but must be)
 73e:	40 e0       	ldi	r20, 0x00	; 0
 740:	62 e4       	ldi	r22, 0x42	; 66
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
			DIO_vdWritePort((DIO_u8ReadPort('A') & 0x0F) | (data << 4),'A');		//Write the LOWBYTEof data on (D7:4)
 748:	81 e4       	ldi	r24, 0x41	; 65
 74a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_u8ReadPort>
 74e:	8f 70       	andi	r24, 0x0F	; 15
 750:	90 e1       	ldi	r25, 0x10	; 16
 752:	c9 9f       	mul	r28, r25
 754:	90 01       	movw	r18, r0
 756:	11 24       	eor	r1, r1
 758:	61 e4       	ldi	r22, 0x41	; 65
 75a:	82 2b       	or	r24, r18
 75c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_vdWritePort>
 760:	8f ec       	ldi	r24, 0xCF	; 207
 762:	97 e0       	ldi	r25, 0x07	; 7
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <LCD_vdWriteChar+0xd6>
 768:	00 c0       	rjmp	.+0      	; 0x76a <LCD_vdWriteChar+0xdc>
 76a:	00 00       	nop
			_delay_ms(1);						//wait at least 450ns
			DIO_vdWritePin(0,'B',0);			//reset the EN=0
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	62 e4       	ldi	r22, 0x42	; 66
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
 776:	8f ec       	ldi	r24, 0xCF	; 207
 778:	97 e0       	ldi	r25, 0x07	; 7
 77a:	01 97       	sbiw	r24, 0x01	; 1
 77c:	f1 f7       	brne	.-4      	; 0x77a <LCD_vdWriteChar+0xec>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <LCD_vdWriteChar+0xf2>
 780:	00 00       	nop
			_delay_ms(1);						//Wait 5ms for command writes, and 200us for data writes.
			break;
	}
}
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <LEDon>:
#include "LED.h"
#include "DIO.h"

static unsigned char LEDstatus[8] = {0,0,0,0,0,0,0,0};

void LEDon(unsigned char port,unsigned char pin){
 786:	cf 93       	push	r28
 788:	c6 2f       	mov	r28, r22
	DIO_vdWritePin(1,port,pin);
 78a:	46 2f       	mov	r20, r22
 78c:	68 2f       	mov	r22, r24
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
	LEDstatus[pin] = 1;
 794:	ec 2f       	mov	r30, r28
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	e9 59       	subi	r30, 0x99	; 153
 79a:	ff 4f       	sbci	r31, 0xFF	; 255
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	80 83       	st	Z, r24
}
 7a0:	cf 91       	pop	r28
 7a2:	08 95       	ret

000007a4 <LEDoff>:

void LEDoff(unsigned char port,unsigned char pin){
 7a4:	cf 93       	push	r28
 7a6:	c6 2f       	mov	r28, r22
	DIO_vdWritePin(0,port,pin);
 7a8:	46 2f       	mov	r20, r22
 7aa:	68 2f       	mov	r22, r24
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_vdWritePin>
	LEDstatus[pin] = 0;
 7b2:	ec 2f       	mov	r30, r28
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	e9 59       	subi	r30, 0x99	; 153
 7b8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ba:	10 82       	st	Z, r1
}
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <LEDtoggle>:

void LEDtoggle(unsigned char port,unsigned char pin){
	if(LEDstatus[pin]){
 7c0:	e6 2f       	mov	r30, r22
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	e9 59       	subi	r30, 0x99	; 153
 7c6:	ff 4f       	sbci	r31, 0xFF	; 255
 7c8:	90 81       	ld	r25, Z
 7ca:	99 23       	and	r25, r25
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <LEDtoggle+0x14>
		LEDoff(port,pin);
 7ce:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LEDoff>
 7d2:	08 95       	ret
	}else{
		LEDon(port,pin);
 7d4:	0e 94 c3 03 	call	0x786	; 0x786 <LEDon>
 7d8:	08 95       	ret

000007da <main>:
#include "Sch.h"

int main(void)
{
    /* Replace with your application code */
	Sch_vdInit();
 7da:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <Sch_vdInit>
    while (1) 
    {
		Sch_vdEngine();
 7de:	0e 94 0b 04 	call	0x816	; 0x816 <Sch_vdEngine>
		
    }
 7e2:	fd cf       	rjmp	.-6      	; 0x7de <main+0x4>

000007e4 <SCH_vdTick>:
	APP_vdDefaultPASSinit();
	APP_vdDONE();
}

void SCH_vdTick(){
	c++;
 7e4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <c>
 7e8:	8f 5f       	subi	r24, 0xFF	; 255
 7ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <c>
 7ee:	08 95       	ret

000007f0 <Sch_vdInit>:
#include <avr/io.h>  //for debugging	

static unsigned char c = 0;

void Sch_vdInit(){
	DIO_vdInit();
 7f0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_vdInit>
	TIMER0_vdInit(SCH_vdTick);
 7f4:	82 ef       	ldi	r24, 0xF2	; 242
 7f6:	93 e0       	ldi	r25, 0x03	; 3
 7f8:	0e 94 4c 04 	call	0x898	; 0x898 <TIMER0_vdInit>
	LCD_vdInit(MODE_4_BITS);
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	0e 94 08 03 	call	0x610	; 0x610 <LCD_vdInit>
	SPI_vdInit(SLAVE);
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	0e 94 1e 04 	call	0x83c	; 0x83c <SPI_vdInit>
	EEPROM_vdInit();
 808:	0e 94 8d 01 	call	0x31a	; 0x31a <EEPROM_vdInit>
	APP_vdDefaultPASSinit();
 80c:	0e 94 49 00 	call	0x92	; 0x92 <APP_vdDefaultPASSinit>
	APP_vdDONE();
 810:	0e 94 69 00 	call	0xd2	; 0xd2 <APP_vdDONE>
 814:	08 95       	ret

00000816 <Sch_vdEngine>:
	c++;
}
	
void Sch_vdEngine(){
	static unsigned char temp = 0;
	if(((c%2)==0) && (c-temp)){
 816:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <c>
 81a:	80 fd       	sbrc	r24, 0
 81c:	0e c0       	rjmp	.+28     	; 0x83a <Sch_vdEngine+0x24>
 81e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <temp.1705>
 822:	89 17       	cp	r24, r25
 824:	51 f0       	breq	.+20     	; 0x83a <Sch_vdEngine+0x24>
		APP_vdCall();
 826:	0e 94 6d 00 	call	0xda	; 0xda <APP_vdCall>
		LEDtoggle('D',4);
 82a:	64 e0       	ldi	r22, 0x04	; 4
 82c:	84 e4       	ldi	r24, 0x44	; 68
 82e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LEDtoggle>
		temp = c;
 832:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <c>
 836:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <temp.1705>
 83a:	08 95       	ret

0000083c <SPI_vdInit>:
void SPI_vdSend2Bytes(int data){
	/*send 1st byte */
	SPI_vdSendByte((unsigned char)data);
	/* send 2nd byte */
	SPI_vdSendByte((unsigned char)(data>>8));
}
 83c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <mode>
 840:	88 23       	and	r24, r24
 842:	19 f0       	breq	.+6      	; 0x84a <SPI_vdInit+0xe>
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	41 f0       	breq	.+16     	; 0x858 <SPI_vdInit+0x1c>
 848:	0b c0       	rjmp	.+22     	; 0x860 <SPI_vdInit+0x24>
 84a:	87 b3       	in	r24, 0x17	; 23
 84c:	80 6b       	ori	r24, 0xB0	; 176
 84e:	87 bb       	out	0x17, r24	; 23
 850:	c4 9a       	sbi	0x18, 4	; 24
 852:	be 98       	cbi	0x17, 6	; 23
 854:	6c 9a       	sbi	0x0d, 4	; 13
 856:	04 c0       	rjmp	.+8      	; 0x860 <SPI_vdInit+0x24>
 858:	be 9a       	sbi	0x17, 6	; 23
 85a:	87 b3       	in	r24, 0x17	; 23
 85c:	8f 74       	andi	r24, 0x4F	; 79
 85e:	87 bb       	out	0x17, r24	; 23
 860:	6e 9a       	sbi	0x0d, 6	; 13
 862:	08 95       	ret

00000864 <SPI_vdSendByte>:
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	1f 92       	push	r1
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	8f b9       	out	0x0f, r24	; 15
 870:	77 9b       	sbis	0x0e, 7	; 14
 872:	fe cf       	rjmp	.-4      	; 0x870 <SPI_vdSendByte+0xc>
 874:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vdWriteChar>
 878:	8f b1       	in	r24, 0x0f	; 15
 87a:	89 83       	std	Y+1, r24	; 0x01
 87c:	0f 90       	pop	r0
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <SPI_u8Receive>:

unsigned char SPI_u8Receive(){
	if(mode == MASTER){
 884:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <mode>
 888:	81 11       	cpse	r24, r1
 88a:	02 c0       	rjmp	.+4      	; 0x890 <SPI_u8Receive+0xc>
		SPDR = 0xFF;	/*Since writing to SPDR generates SCK for transmission, write dummy data in SPDR register.*/
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	8f b9       	out	0x0f, r24	; 15
	}
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 890:	77 9b       	sbis	0x0e, 7	; 14
 892:	fe cf       	rjmp	.-4      	; 0x890 <SPI_u8Receive+0xc>
	return(SPDR);			/* Return received data */
 894:	8f b1       	in	r24, 0x0f	; 15
}
 896:	08 95       	ret

00000898 <TIMER0_vdInit>:

static void (*fptr)(void);

void TIMER0_vdInit(void (*ptr)(void)){
/*TIMER0 initialization*/
TCCR0 |= (1<<0); TCCR0 &= ~(1<<1); TCCR0 |= (1<<2);		//clock select: CLK/1024
 898:	23 b7       	in	r18, 0x33	; 51
 89a:	21 60       	ori	r18, 0x01	; 1
 89c:	23 bf       	out	0x33, r18	; 51
 89e:	23 b7       	in	r18, 0x33	; 51
 8a0:	2d 7f       	andi	r18, 0xFD	; 253
 8a2:	23 bf       	out	0x33, r18	; 51
 8a4:	23 b7       	in	r18, 0x33	; 51
 8a6:	24 60       	ori	r18, 0x04	; 4
 8a8:	23 bf       	out	0x33, r18	; 51
TIMSK |= (1<<1);										//Output compare Interrupt Enable
 8aa:	29 b7       	in	r18, 0x39	; 57
 8ac:	22 60       	ori	r18, 0x02	; 2
 8ae:	29 bf       	out	0x39, r18	; 57
TCCR0 &= ~(1<<6); TCCR0 |= (1<<3);						//mode: CTC
 8b0:	23 b7       	in	r18, 0x33	; 51
 8b2:	2f 7b       	andi	r18, 0xBF	; 191
 8b4:	23 bf       	out	0x33, r18	; 51
 8b6:	23 b7       	in	r18, 0x33	; 51
 8b8:	28 60       	ori	r18, 0x08	; 8
 8ba:	23 bf       	out	0x33, r18	; 51
OCR0 = 10;												// F_CPU/pre_scalar * 10 ms
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	2c bf       	out	0x3c, r18	; 60
SREG |= (1<<7);											//Global Interrupt Enable
 8c0:	2f b7       	in	r18, 0x3f	; 63
 8c2:	20 68       	ori	r18, 0x80	; 128
 8c4:	2f bf       	out	0x3f, r18	; 63

/*passing the Tick increasing function to ISR*/
fptr = ptr;
 8c6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <fptr+0x1>
 8ca:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <fptr>
 8ce:	08 95       	ret

000008d0 <__vector_19>:
}

ISR(TIMER0_COMP_vect){
 8d0:	1f 92       	push	r1
 8d2:	0f 92       	push	r0
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	0f 92       	push	r0
 8d8:	11 24       	eor	r1, r1
 8da:	2f 93       	push	r18
 8dc:	3f 93       	push	r19
 8de:	4f 93       	push	r20
 8e0:	5f 93       	push	r21
 8e2:	6f 93       	push	r22
 8e4:	7f 93       	push	r23
 8e6:	8f 93       	push	r24
 8e8:	9f 93       	push	r25
 8ea:	af 93       	push	r26
 8ec:	bf 93       	push	r27
 8ee:	ef 93       	push	r30
 8f0:	ff 93       	push	r31
	fptr();
 8f2:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <fptr>
 8f6:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <fptr+0x1>
 8fa:	09 95       	icall
 8fc:	ff 91       	pop	r31
 8fe:	ef 91       	pop	r30
 900:	bf 91       	pop	r27
 902:	af 91       	pop	r26
 904:	9f 91       	pop	r25
 906:	8f 91       	pop	r24
 908:	7f 91       	pop	r23
 90a:	6f 91       	pop	r22
 90c:	5f 91       	pop	r21
 90e:	4f 91       	pop	r20
 910:	3f 91       	pop	r19
 912:	2f 91       	pop	r18
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <TWI_vdInit>:
#include <avr/io.h>
#include "TWI.h"

void TWI_vdInit(){
	//clk = 200 KHz
	TWBR = 24;	
 91e:	88 e1       	ldi	r24, 0x18	; 24
 920:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(1<<TWPS1)|~(1<<TWPS0);
 922:	81 b1       	in	r24, 0x01	; 1
 924:	81 b9       	out	0x01, r24	; 1
	
	//set address for slave mode
	TWSR = 10;
 926:	8a e0       	ldi	r24, 0x0A	; 10
 928:	81 b9       	out	0x01, r24	; 1
	
	//Enable Ack ( has no use here we can set it in ReceiveWithAck or ReceiveWithNoAck )
	//TWCR |= (1<<TWEA);
	
	//Enable TWI
	TWCR |= (1<<TWEN);
 92a:	86 b7       	in	r24, 0x36	; 54
 92c:	84 60       	ori	r24, 0x04	; 4
 92e:	86 bf       	out	0x36, r24	; 54
 930:	08 95       	ret

00000932 <TWI_vdSendStart>:
}

void TWI_vdSendStart(){
	//Enable TWI , Clear interrupt flag to start operation , Send Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) ;
 932:	84 ea       	ldi	r24, 0xA4	; 164
 934:	86 bf       	out	0x36, r24	; 54
	//waiting until Start is transmitted 
	while (!(TWCR & (1<<TWINT)));
 936:	06 b6       	in	r0, 0x36	; 54
 938:	07 fe       	sbrs	r0, 7
 93a:	fd cf       	rjmp	.-6      	; 0x936 <TWI_vdSendStart+0x4>
}
 93c:	08 95       	ret

0000093e <TWI_vdSendStop>:

void TWI_vdSendStop(){
	//Enable TWI , Clear interrupt flag to start operation , Send Stop
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 93e:	84 e9       	ldi	r24, 0x94	; 148
 940:	86 bf       	out	0x36, r24	; 54
 942:	08 95       	ret

00000944 <TWI_vdWrite>:
}

void TWI_vdWrite(unsigned char data){
	//writing data in TWDR
	TWDR = data;
 944:	83 b9       	out	0x03, r24	; 3
	//Enable TWI , Clear interrupt flag to start operation
	TWCR = (1<<TWINT)|(1<<TWEN);
 946:	84 e8       	ldi	r24, 0x84	; 132
 948:	86 bf       	out	0x36, r24	; 54
	//wait until data is transmitted & ACK or NACK has been received
	while (!(TWCR & (1<<TWINT)));
 94a:	06 b6       	in	r0, 0x36	; 54
 94c:	07 fe       	sbrs	r0, 7
 94e:	fd cf       	rjmp	.-6      	; 0x94a <TWI_vdWrite+0x6>
}
 950:	08 95       	ret

00000952 <TWI_u8CheckStatus>:

unsigned char TWI_u8CheckStatus(unsigned char status){
	if ( (TWSR & 0b11111000) == status)
 952:	91 b1       	in	r25, 0x01	; 1
 954:	98 7f       	andi	r25, 0xF8	; 248
 956:	21 e0       	ldi	r18, 0x01	; 1
 958:	98 13       	cpse	r25, r24
 95a:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
		return False ;
	}
}
 95c:	82 2f       	mov	r24, r18
 95e:	08 95       	ret

00000960 <TWI_u8ReadwithNoAck>:

unsigned char TWI_u8ReadwithNoAck(){
	//Enable TWI , No ACK , Clear interrupt flag to start operation
	TWCR &= ~(1<<TWEA);		//No ACK will be transmitted from me(master) after receiving
 960:	86 b7       	in	r24, 0x36	; 54
 962:	8f 7b       	andi	r24, 0xBF	; 191
 964:	86 bf       	out	0x36, r24	; 54
	TWCR = (1 << TWEN) | (1 << TWINT) ;
 966:	84 e8       	ldi	r24, 0x84	; 132
 968:	86 bf       	out	0x36, r24	; 54
	//wait until data is transmitted & ACK or NACK has been received
	while ( !( TWCR&(1 << TWINT) ) ) ;
 96a:	06 b6       	in	r0, 0x36	; 54
 96c:	07 fe       	sbrs	r0, 7
 96e:	fd cf       	rjmp	.-6      	; 0x96a <TWI_u8ReadwithNoAck+0xa>
	return TWDR ;
 970:	83 b1       	in	r24, 0x03	; 3
}
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
