
spi_interrupt_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000e30  00000ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800074  00800074  00000ed8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f2  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000795  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3f  00000000  00000000  00002d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  000038e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc1  00000000  00000000  0000402b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
  8a:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vdWelcome>:
#include "SPI.h" /*simple commmunication protocols (unlike CAN,LIN,..) can be used in APP without interface*/
#include <avr/io.h> //debugging
#include <util/delay.h>

void APP_vdWelcome(){
	LCD_vdWriteStringPos("Counter:",LCD_ROW_1,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e8       	ldi	r22, 0x80	; 128
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_vdWriteStringPos>
	LCD_vdWriteStringPos("Button:",LCD_ROW_2,0);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	60 ec       	ldi	r22, 0xC0	; 192
  a2:	89 e6       	ldi	r24, 0x69	; 105
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_vdWriteStringPos>
  aa:	08 95       	ret

000000ac <APP_vdCounter>:
}

void APP_vdCounter(){
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <APP_vdCounter+0xa>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <APP_vdCounter+0xc>
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];
	static unsigned char count = 0;
	//SPI_vdSendByte('c');
	//_delay_ms(100);
	//SPI_vdSendByte(count);
	sprintf(buffer,"%d",count);
  be:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count.1867>
  c2:	1f 92       	push	r1
  c4:	8f 93       	push	r24
  c6:	81 e7       	ldi	r24, 0x71	; 113
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9f 93       	push	r25
  cc:	8f 93       	push	r24
  ce:	8e 01       	movw	r16, r28
  d0:	0f 5f       	subi	r16, 0xFF	; 255
  d2:	1f 4f       	sbci	r17, 0xFF	; 255
  d4:	1f 93       	push	r17
  d6:	0f 93       	push	r16
  d8:	0e 94 3e 04 	call	0x87c	; 0x87c <sprintf>
	LCD_vdWriteStringPos(buffer,LCD_ROW_1,8);
  dc:	48 e0       	ldi	r20, 0x08	; 8
  de:	60 e8       	ldi	r22, 0x80	; 128
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_vdWriteStringPos>
	count++;
  e6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count.1867>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count.1867>
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
}
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <APP_vdBTN>:

void APP_vdBTN(){
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <APP_vdBTN+0xc>
 11c:	00 d0       	rcall	.+0      	; 0x11e <APP_vdBTN+0xe>
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	static unsigned char btnoldstatus = released;
	char buffer[5];
	static unsigned char count = 0; 
	unsigned char btnstatus = BTN_u8getStatus('A',0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 cb 00 	call	0x196	; 0x196 <BTN_u8getStatus>
 12c:	18 2f       	mov	r17, r24
	
	if(btnoldstatus == pressed && btnstatus==released){
 12e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <btnoldstatus.1870>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	19 f5       	brne	.+70     	; 0x17c <APP_vdBTN+0x6c>
 136:	11 11       	cpse	r17, r1
 138:	21 c0       	rjmp	.+66     	; 0x17c <APP_vdBTN+0x6c>
		count++;
 13a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		sprintf(buffer,"%d",count);
 144:	1f 92       	push	r1
 146:	8f 93       	push	r24
 148:	81 e7       	ldi	r24, 0x71	; 113
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9f 93       	push	r25
 14e:	8f 93       	push	r24
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	7c 01       	movw	r14, r24
 156:	9f 93       	push	r25
 158:	8f 93       	push	r24
 15a:	0e 94 3e 04 	call	0x87c	; 0x87c <sprintf>
		LCD_vdWriteStringPos(buffer,LCD_ROW_2,8);
 15e:	48 e0       	ldi	r20, 0x08	; 8
 160:	60 ec       	ldi	r22, 0xC0	; 192
 162:	c7 01       	movw	r24, r14
 164:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_vdWriteStringPos>
		//SPI_vdSendByte('b');
		//_delay_ms(100);
		SPI_vdSendByte(count);
 168:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 16c:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_vdSendByte>
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
	}
	
	btnoldstatus = btnstatus;
 17c:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <btnoldstatus.1870>
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <BTN_u8getStatus>:
#include <avr/io.h>

static unsigned char BTNstatus[] = {0,0,0,0,0,0,0,0};	

unsigned char BTN_u8getStatus(unsigned char port,unsigned char pin){
	switch( BTNstatus[pin] )
 196:	e6 2f       	mov	r30, r22
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e1 57       	subi	r30, 0x71	; 113
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	19 f0       	breq	.+6      	; 0x1aa <BTN_u8getStatus+0x14>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	09 f0       	breq	.+2      	; 0x1aa <BTN_u8getStatus+0x14>
	{
		case 1 :
		return pressed;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
		case 3 :
		return err;
		break;
	}
	return pressed;
}
 1aa:	08 95       	ret

000001ac <BTN_vdRead>:
count when the signal becomes stable
i used to count the duration of stable signal
j used to trace if the high signal remains for long time which indicates error
finally this function changes the BTNstatus[pin] ==> (pressed , released , error)*/
/*We can delete j counter & use condition (i%3==0) to check stability*/
void BTN_vdRead(unsigned char port,unsigned char pin){
 1ac:	cf 93       	push	r28
 1ae:	c6 2f       	mov	r28, r22
	static unsigned char temp1[] = {0,0,0,0,0,0,0,0};
	static int i[] = {0,0,0,0,0,0,0,0};
	//static int j[] = {0,0,0,0,0,0,0,0};
	unsigned char temp2 = DIO_u8ReadPin(port,pin);
 1b0:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_u8ReadPin>
	
	if(temp1[pin] == temp2){		/*if signal is stable continues counting*/
 1b4:	2c 2f       	mov	r18, r28
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	e9 57       	subi	r30, 0x79	; 121
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	40 81       	ld	r20, Z
 1c0:	48 13       	cpse	r20, r24
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <BTN_vdRead+0x3e>
		i[pin]++;
 1c4:	d9 01       	movw	r26, r18
 1c6:	aa 0f       	add	r26, r26
 1c8:	bb 1f       	adc	r27, r27
 1ca:	a9 58       	subi	r26, 0x89	; 137
 1cc:	bf 4f       	sbci	r27, 0xFF	; 255
 1ce:	ed 91       	ld	r30, X+
 1d0:	fc 91       	ld	r31, X
 1d2:	11 97       	sbiw	r26, 0x01	; 1
 1d4:	31 96       	adiw	r30, 0x01	; 1
 1d6:	ed 93       	st	X+, r30
 1d8:	fc 93       	st	X, r31
		temp1[pin] =temp2;			/*if signal changed reset the count*/
		i[pin]=1;
		//j[pin]=1;
	}
		
	if(i[pin] % 3 == 0){		/*if signal is stable until count is 3, catch the BTNstatus and reset the i counter*/
 1da:	cf 01       	movw	r24, r30
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	0e 94 16 04 	call	0x82c	; 0x82c <__divmodhi4>
 1e4:	89 2b       	or	r24, r25
 1e6:	79 f0       	breq	.+30     	; 0x206 <BTN_vdRead+0x5a>
 1e8:	12 c0       	rjmp	.+36     	; 0x20e <BTN_vdRead+0x62>
	
	if(temp1[pin] == temp2){		/*if signal is stable continues counting*/
		i[pin]++;
		//j[pin]++;
	}else{
		temp1[pin] =temp2;			/*if signal changed reset the count*/
 1ea:	f9 01       	movw	r30, r18
 1ec:	e9 57       	subi	r30, 0x79	; 121
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	80 83       	st	Z, r24
		i[pin]=1;
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	f9 01       	movw	r30, r18
 1f8:	e9 58       	subi	r30, 0x89	; 137
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	91 83       	std	Z+1, r25	; 0x01
 202:	80 83       	st	Z, r24
 204:	19 c0       	rjmp	.+50     	; 0x238 <BTN_vdRead+0x8c>
		//j[pin]=1;
	}
		
	if(i[pin] % 3 == 0){		/*if signal is stable until count is 3, catch the BTNstatus and reset the i counter*/
		BTNstatus[pin] = temp2;
 206:	d9 01       	movw	r26, r18
 208:	a1 57       	subi	r26, 0x71	; 113
 20a:	bf 4f       	sbci	r27, 0xFF	; 255
 20c:	4c 93       	st	X, r20
		//i[pin]=0;
	}
		
	if(i[pin] == 400 && BTNstatus[pin]==pressed){	 /*if signal is sticked to high ==> error*/
 20e:	e0 39       	cpi	r30, 0x90	; 144
 210:	f1 40       	sbci	r31, 0x01	; 1
 212:	91 f4       	brne	.+36     	; 0x238 <BTN_vdRead+0x8c>
 214:	f9 01       	movw	r30, r18
 216:	e1 57       	subi	r30, 0x71	; 113
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	80 81       	ld	r24, Z
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	61 f4       	brne	.+24     	; 0x238 <BTN_vdRead+0x8c>
		BTNstatus[pin] = err;
 220:	f9 01       	movw	r30, r18
 222:	e1 57       	subi	r30, 0x71	; 113
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 83       	st	Z, r24
		//j[pin]=0;
		i[pin] = 0;
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	f9 01       	movw	r30, r18
 230:	e9 58       	subi	r30, 0x89	; 137
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	11 82       	std	Z+1, r1	; 0x01
 236:	10 82       	st	Z, r1
	}
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <DIO_vdInit>:

#include <avr/io.h>
#include "DIO.h"

void DIO_vdInit(){
	DDRC = 0b00001111;		//Keypad
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xF0; PORTA=0;	DDRB |=(1<<0)|(1<<1);	//btn + LCD
 240:	80 ef       	ldi	r24, 0xF0	; 240
 242:	8a bb       	out	0x1a, r24	; 26
 244:	1b ba       	out	0x1b, r1	; 27
 246:	87 b3       	in	r24, 0x17	; 23
 248:	83 60       	ori	r24, 0x03	; 3
 24a:	87 bb       	out	0x17, r24	; 23
	/*PORTB 4 5 6 7 pins is for SPI*/	
	DDRD = 0xFF; PORTD=0;	//debug
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	81 bb       	out	0x11, r24	; 17
 250:	12 ba       	out	0x12, r1	; 18
 252:	08 95       	ret

00000254 <DIO_u8ReadPin>:
	
}

unsigned char DIO_u8ReadPin(unsigned char port,unsigned char pin){
	switch(port){
 254:	82 34       	cpi	r24, 0x42	; 66
 256:	91 f0       	breq	.+36     	; 0x27c <DIO_u8ReadPin+0x28>
 258:	18 f4       	brcc	.+6      	; 0x260 <DIO_u8ReadPin+0xc>
 25a:	81 34       	cpi	r24, 0x41	; 65
 25c:	31 f0       	breq	.+12     	; 0x26a <DIO_u8ReadPin+0x16>
 25e:	29 c0       	rjmp	.+82     	; 0x2b2 <DIO_u8ReadPin+0x5e>
 260:	83 34       	cpi	r24, 0x43	; 67
 262:	a9 f0       	breq	.+42     	; 0x28e <DIO_u8ReadPin+0x3a>
 264:	84 34       	cpi	r24, 0x44	; 68
 266:	e1 f0       	breq	.+56     	; 0x2a0 <DIO_u8ReadPin+0x4c>
 268:	24 c0       	rjmp	.+72     	; 0x2b2 <DIO_u8ReadPin+0x5e>
		case 'A':
			return (PINA & (1<<pin))?1:0;
 26a:	89 b3       	in	r24, 0x19	; 25
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8ReadPin+0x20>
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_u8ReadPin+0x1c>
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	08 95       	ret
		case 'B':
			return (PINB & (1<<pin))?1:0;
 27c:	86 b3       	in	r24, 0x16	; 22
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8ReadPin+0x32>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8ReadPin+0x2e>
 28a:	81 70       	andi	r24, 0x01	; 1
 28c:	08 95       	ret
		case 'C':
			return (PINC & (1<<pin))?1:0;
 28e:	83 b3       	in	r24, 0x13	; 19
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_u8ReadPin+0x44>
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_u8ReadPin+0x40>
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	08 95       	ret
		case 'D':
			return (PIND & (1<<pin))?1:0;
 2a0:	80 b3       	in	r24, 0x10	; 16
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8ReadPin+0x56>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8ReadPin+0x52>
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	08 95       	ret
	}
	return 0;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
}
 2b4:	08 95       	ret

000002b6 <DIO_u8ReadPort>:

unsigned char DIO_u8ReadPort(unsigned char port){
	switch(port){
 2b6:	82 34       	cpi	r24, 0x42	; 66
 2b8:	59 f0       	breq	.+22     	; 0x2d0 <DIO_u8ReadPort+0x1a>
 2ba:	18 f4       	brcc	.+6      	; 0x2c2 <DIO_u8ReadPort+0xc>
 2bc:	81 34       	cpi	r24, 0x41	; 65
 2be:	31 f0       	breq	.+12     	; 0x2cc <DIO_u8ReadPort+0x16>
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <DIO_u8ReadPort+0x26>
 2c2:	83 34       	cpi	r24, 0x43	; 67
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <DIO_u8ReadPort+0x1e>
 2c6:	84 34       	cpi	r24, 0x44	; 68
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <DIO_u8ReadPort+0x22>
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <DIO_u8ReadPort+0x26>
		case 'A':
		return (PINA);
 2cc:	89 b3       	in	r24, 0x19	; 25
 2ce:	08 95       	ret
		case 'B':
		return (PINB);
 2d0:	86 b3       	in	r24, 0x16	; 22
 2d2:	08 95       	ret
		case 'C':
		return (PINC);
 2d4:	83 b3       	in	r24, 0x13	; 19
 2d6:	08 95       	ret
		case 'D':
		return (PIND);
 2d8:	80 b3       	in	r24, 0x10	; 16
 2da:	08 95       	ret
	}
	return 0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
}
 2de:	08 95       	ret

000002e0 <DIO_vdWritePin>:

void DIO_vdWritePin(unsigned char data,unsigned char port,unsigned char pin){
	switch(port){
 2e0:	62 34       	cpi	r22, 0x42	; 66
 2e2:	19 f1       	breq	.+70     	; 0x32a <DIO_vdWritePin+0x4a>
 2e4:	18 f4       	brcc	.+6      	; 0x2ec <DIO_vdWritePin+0xc>
 2e6:	61 34       	cpi	r22, 0x41	; 65
 2e8:	39 f0       	breq	.+14     	; 0x2f8 <DIO_vdWritePin+0x18>
 2ea:	08 95       	ret
 2ec:	63 34       	cpi	r22, 0x43	; 67
 2ee:	b1 f1       	breq	.+108    	; 0x35c <DIO_vdWritePin+0x7c>
 2f0:	64 34       	cpi	r22, 0x44	; 68
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <DIO_vdWritePin+0x16>
 2f4:	4c c0       	rjmp	.+152    	; 0x38e <DIO_vdWritePin+0xae>
 2f6:	08 95       	ret
		case 'A':
			if(data){
 2f8:	88 23       	and	r24, r24
 2fa:	59 f0       	breq	.+22     	; 0x312 <DIO_vdWritePin+0x32>
				PORTA |= (1<<pin); 
 2fc:	2b b3       	in	r18, 0x1b	; 27
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_vdWritePin+0x28>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	4a 95       	dec	r20
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_vdWritePin+0x24>
 30c:	82 2b       	or	r24, r18
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	08 95       	ret
			}else{
				PORTA &= ~(1<<pin);
 312:	2b b3       	in	r18, 0x1b	; 27
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_vdWritePin+0x3e>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	4a 95       	dec	r20
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_vdWritePin+0x3a>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	8b bb       	out	0x1b, r24	; 27
 328:	08 95       	ret
			}
			break;
		case 'B':
			if(data){
 32a:	88 23       	and	r24, r24
 32c:	59 f0       	breq	.+22     	; 0x344 <DIO_vdWritePin+0x64>
				PORTB |= (1<<pin);
 32e:	28 b3       	in	r18, 0x18	; 24
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_vdWritePin+0x5a>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	4a 95       	dec	r20
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_vdWritePin+0x56>
 33e:	82 2b       	or	r24, r18
 340:	88 bb       	out	0x18, r24	; 24
 342:	08 95       	ret
			}else{
				PORTB &= ~(1<<pin);
 344:	28 b3       	in	r18, 0x18	; 24
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vdWritePin+0x70>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	4a 95       	dec	r20
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vdWritePin+0x6c>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	88 bb       	out	0x18, r24	; 24
 35a:	08 95       	ret
			}
			break;
		case 'C':
			if(data){
 35c:	88 23       	and	r24, r24
 35e:	59 f0       	breq	.+22     	; 0x376 <DIO_vdWritePin+0x96>
				PORTC |= (1<<pin);
 360:	25 b3       	in	r18, 0x15	; 21
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_vdWritePin+0x8c>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	4a 95       	dec	r20
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_vdWritePin+0x88>
 370:	82 2b       	or	r24, r18
 372:	85 bb       	out	0x15, r24	; 21
 374:	08 95       	ret
			}else{
				PORTC &= ~(1<<pin);
 376:	25 b3       	in	r18, 0x15	; 21
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_vdWritePin+0xa2>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	4a 95       	dec	r20
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_vdWritePin+0x9e>
 386:	80 95       	com	r24
 388:	82 23       	and	r24, r18
 38a:	85 bb       	out	0x15, r24	; 21
 38c:	08 95       	ret
			}
			break;
		case 'D':
			if(data){
 38e:	88 23       	and	r24, r24
 390:	59 f0       	breq	.+22     	; 0x3a8 <DIO_vdWritePin+0xc8>
				PORTD |= (1<<pin);
 392:	22 b3       	in	r18, 0x12	; 18
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_vdWritePin+0xbe>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	4a 95       	dec	r20
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_vdWritePin+0xba>
 3a2:	82 2b       	or	r24, r18
 3a4:	82 bb       	out	0x12, r24	; 18
 3a6:	08 95       	ret
			}else{
				PORTD &= ~(1<<pin);
 3a8:	22 b3       	in	r18, 0x12	; 18
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_vdWritePin+0xd4>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	4a 95       	dec	r20
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_vdWritePin+0xd0>
 3b8:	80 95       	com	r24
 3ba:	82 23       	and	r24, r18
 3bc:	82 bb       	out	0x12, r24	; 18
 3be:	08 95       	ret

000003c0 <DIO_vdWritePort>:
			break;
	}
}

void DIO_vdWritePort(unsigned char data,unsigned char port){
	switch(port){
 3c0:	62 34       	cpi	r22, 0x42	; 66
 3c2:	79 f0       	breq	.+30     	; 0x3e2 <DIO_vdWritePort+0x22>
 3c4:	18 f4       	brcc	.+6      	; 0x3cc <DIO_vdWritePort+0xc>
 3c6:	61 34       	cpi	r22, 0x41	; 65
 3c8:	31 f0       	breq	.+12     	; 0x3d6 <DIO_vdWritePort+0x16>
 3ca:	08 95       	ret
 3cc:	63 34       	cpi	r22, 0x43	; 67
 3ce:	79 f0       	breq	.+30     	; 0x3ee <DIO_vdWritePort+0x2e>
 3d0:	64 34       	cpi	r22, 0x44	; 68
 3d2:	99 f0       	breq	.+38     	; 0x3fa <DIO_vdWritePort+0x3a>
 3d4:	08 95       	ret
		case 'A':
			if(data){
 3d6:	88 23       	and	r24, r24
 3d8:	11 f0       	breq	.+4      	; 0x3de <DIO_vdWritePort+0x1e>
				PORTA = data;
 3da:	8b bb       	out	0x1b, r24	; 27
 3dc:	08 95       	ret
			}else{
				PORTA = 0;
 3de:	1b ba       	out	0x1b, r1	; 27
 3e0:	08 95       	ret
			}
			break;
		case 'B':
			if(data){
 3e2:	88 23       	and	r24, r24
 3e4:	11 f0       	breq	.+4      	; 0x3ea <DIO_vdWritePort+0x2a>
				PORTB = data;
 3e6:	88 bb       	out	0x18, r24	; 24
 3e8:	08 95       	ret
			}else{
				PORTB = 0;
 3ea:	18 ba       	out	0x18, r1	; 24
 3ec:	08 95       	ret
			}
			break;
		case 'C':
			if(data){
 3ee:	88 23       	and	r24, r24
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <DIO_vdWritePort+0x36>
				PORTC = data;
 3f2:	85 bb       	out	0x15, r24	; 21
 3f4:	08 95       	ret
			}else{
				PORTC = 0;
 3f6:	15 ba       	out	0x15, r1	; 21
 3f8:	08 95       	ret
			}
			break;
		case 'D':
			if(data){
 3fa:	88 23       	and	r24, r24
 3fc:	11 f0       	breq	.+4      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
				PORTD = data;
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	08 95       	ret
			}else{
				PORTD = 0;
 402:	12 ba       	out	0x12, r1	; 18
 404:	08 95       	ret

00000406 <LCD_vdSendCom>:
{
	for (int i=0;ptr[i]!='\0';i++)
	{
		LCD_vdWriteChar(ptr[i]);
	}
}
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
 40a:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <mode>
 40e:	99 23       	and	r25, r25
 410:	19 f0       	breq	.+6      	; 0x418 <LCD_vdSendCom+0x12>
 412:	91 30       	cpi	r25, 0x01	; 1
 414:	31 f1       	breq	.+76     	; 0x462 <__stack+0x3>
 416:	71 c0       	rjmp	.+226    	; 0x4fa <__stack+0x9b>
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	62 e4       	ldi	r22, 0x42	; 66
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 422:	61 e4       	ldi	r22, 0x41	; 65
 424:	8c 2f       	mov	r24, r28
 426:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_vdWritePort>
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	62 e4       	ldi	r22, 0x42	; 66
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	62 e4       	ldi	r22, 0x42	; 66
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 43e:	8f ec       	ldi	r24, 0xCF	; 207
 440:	97 e0       	ldi	r25, 0x07	; 7
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCD_vdSendCom+0x3c>
 446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_vdSendCom+0x42>
 448:	00 00       	nop
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	62 e4       	ldi	r22, 0x42	; 66
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 454:	8f ed       	ldi	r24, 0xDF	; 223
 456:	9e e2       	ldi	r25, 0x2E	; 46
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_vdSendCom+0x52>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <LCD_vdSendCom+0x58>
 45e:	00 00       	nop
 460:	4c c0       	rjmp	.+152    	; 0x4fa <__stack+0x9b>
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	62 e4       	ldi	r22, 0x42	; 66
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 46c:	81 e4       	ldi	r24, 0x41	; 65
 46e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_u8ReadPort>
 472:	8f 70       	andi	r24, 0x0F	; 15
 474:	9c 2f       	mov	r25, r28
 476:	90 7f       	andi	r25, 0xF0	; 240
 478:	61 e4       	ldi	r22, 0x41	; 65
 47a:	89 2b       	or	r24, r25
 47c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_vdWritePort>
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	62 e4       	ldi	r22, 0x42	; 66
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e4       	ldi	r22, 0x42	; 66
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 494:	8f ec       	ldi	r24, 0xCF	; 207
 496:	97 e0       	ldi	r25, 0x07	; 7
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__stack+0x39>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__stack+0x3f>
 49e:	00 00       	nop
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	62 e4       	ldi	r22, 0x42	; 66
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 4aa:	8f ed       	ldi	r24, 0xDF	; 223
 4ac:	9e e2       	ldi	r25, 0x2E	; 46
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__stack+0x4f>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__stack+0x55>
 4b4:	00 00       	nop
 4b6:	81 e4       	ldi	r24, 0x41	; 65
 4b8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_u8ReadPort>
 4bc:	8f 70       	andi	r24, 0x0F	; 15
 4be:	90 e1       	ldi	r25, 0x10	; 16
 4c0:	c9 9f       	mul	r28, r25
 4c2:	90 01       	movw	r18, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	61 e4       	ldi	r22, 0x41	; 65
 4c8:	82 2b       	or	r24, r18
 4ca:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_vdWritePort>
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	62 e4       	ldi	r22, 0x42	; 66
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 4d8:	8f ec       	ldi	r24, 0xCF	; 207
 4da:	97 e0       	ldi	r25, 0x07	; 7
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <__stack+0x7d>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__stack+0x83>
 4e2:	00 00       	nop
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	62 e4       	ldi	r22, 0x42	; 66
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 4ee:	8f ed       	ldi	r24, 0xDF	; 223
 4f0:	9e e2       	ldi	r25, 0x2E	; 46
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__stack+0x93>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__stack+0x99>
 4f8:	00 00       	nop
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <LCD_vdInit>:
 4fe:	ef e3       	ldi	r30, 0x3F	; 63
 500:	fc e9       	ldi	r31, 0x9C	; 156
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <LCD_vdInit+0x4>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCD_vdInit+0xa>
 508:	00 00       	nop
 50a:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <mode>
 50e:	88 23       	and	r24, r24
 510:	19 f0       	breq	.+6      	; 0x518 <LCD_vdInit+0x1a>
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	d1 f0       	breq	.+52     	; 0x54a <LCD_vdInit+0x4c>
 516:	08 95       	ret
 518:	80 e3       	ldi	r24, 0x30	; 48
 51a:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 51e:	88 e3       	ldi	r24, 0x38	; 56
 520:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 524:	8e e0       	ldi	r24, 0x0E	; 14
 526:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 536:	8f e9       	ldi	r24, 0x9F	; 159
 538:	9f e0       	ldi	r25, 0x0F	; 15
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_vdInit+0x3c>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_vdInit+0x42>
 540:	00 00       	nop
 542:	80 e8       	ldi	r24, 0x80	; 128
 544:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 548:	08 95       	ret
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 550:	88 e2       	ldi	r24, 0x28	; 40
 552:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 556:	8e e0       	ldi	r24, 0x0E	; 14
 558:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 55c:	86 e0       	ldi	r24, 0x06	; 6
 55e:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 568:	ef e9       	ldi	r30, 0x9F	; 159
 56a:	ff e0       	ldi	r31, 0x0F	; 15
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <LCD_vdInit+0x6e>
 570:	00 c0       	rjmp	.+0      	; 0x572 <LCD_vdInit+0x74>
 572:	00 00       	nop
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
 57a:	08 95       	ret

0000057c <LCD_vdWriteChar>:
 57c:	cf 93       	push	r28
 57e:	c8 2f       	mov	r28, r24
 580:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <mode>
 584:	99 23       	and	r25, r25
 586:	19 f0       	breq	.+6      	; 0x58e <LCD_vdWriteChar+0x12>
 588:	91 30       	cpi	r25, 0x01	; 1
 58a:	31 f1       	breq	.+76     	; 0x5d8 <LCD_vdWriteChar+0x5c>
 58c:	71 c0       	rjmp	.+226    	; 0x670 <LCD_vdWriteChar+0xf4>
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	62 e4       	ldi	r22, 0x42	; 66
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 598:	61 e4       	ldi	r22, 0x41	; 65
 59a:	8c 2f       	mov	r24, r28
 59c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_vdWritePort>
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	62 e4       	ldi	r22, 0x42	; 66
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	62 e4       	ldi	r22, 0x42	; 66
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 5b4:	8f ec       	ldi	r24, 0xCF	; 207
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_vdWriteChar+0x3c>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_vdWriteChar+0x42>
 5be:	00 00       	nop
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	62 e4       	ldi	r22, 0x42	; 66
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 5ca:	8f ec       	ldi	r24, 0xCF	; 207
 5cc:	97 e0       	ldi	r25, 0x07	; 7
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <LCD_vdWriteChar+0x52>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <LCD_vdWriteChar+0x58>
 5d4:	00 00       	nop
 5d6:	4c c0       	rjmp	.+152    	; 0x670 <LCD_vdWriteChar+0xf4>
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	62 e4       	ldi	r22, 0x42	; 66
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 5e2:	81 e4       	ldi	r24, 0x41	; 65
 5e4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_u8ReadPort>
 5e8:	8f 70       	andi	r24, 0x0F	; 15
 5ea:	9c 2f       	mov	r25, r28
 5ec:	90 7f       	andi	r25, 0xF0	; 240
 5ee:	61 e4       	ldi	r22, 0x41	; 65
 5f0:	89 2b       	or	r24, r25
 5f2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_vdWritePort>
 5f6:	41 e0       	ldi	r20, 0x01	; 1
 5f8:	62 e4       	ldi	r22, 0x42	; 66
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	62 e4       	ldi	r22, 0x42	; 66
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 60a:	8f ec       	ldi	r24, 0xCF	; 207
 60c:	97 e0       	ldi	r25, 0x07	; 7
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <LCD_vdWriteChar+0x92>
 612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_vdWriteChar+0x98>
 614:	00 00       	nop
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	62 e4       	ldi	r22, 0x42	; 66
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 620:	8f ec       	ldi	r24, 0xCF	; 207
 622:	97 e0       	ldi	r25, 0x07	; 7
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <LCD_vdWriteChar+0xa8>
 628:	00 c0       	rjmp	.+0      	; 0x62a <LCD_vdWriteChar+0xae>
 62a:	00 00       	nop
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	62 e4       	ldi	r22, 0x42	; 66
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 636:	81 e4       	ldi	r24, 0x41	; 65
 638:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_u8ReadPort>
 63c:	8f 70       	andi	r24, 0x0F	; 15
 63e:	90 e1       	ldi	r25, 0x10	; 16
 640:	c9 9f       	mul	r28, r25
 642:	90 01       	movw	r18, r0
 644:	11 24       	eor	r1, r1
 646:	61 e4       	ldi	r22, 0x41	; 65
 648:	82 2b       	or	r24, r18
 64a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_vdWritePort>
 64e:	8f ec       	ldi	r24, 0xCF	; 207
 650:	97 e0       	ldi	r25, 0x07	; 7
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <LCD_vdWriteChar+0xd6>
 656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_vdWriteChar+0xdc>
 658:	00 00       	nop
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	62 e4       	ldi	r22, 0x42	; 66
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_vdWritePin>
 664:	8f ec       	ldi	r24, 0xCF	; 207
 666:	97 e0       	ldi	r25, 0x07	; 7
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <LCD_vdWriteChar+0xec>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_vdWriteChar+0xf2>
 66e:	00 00       	nop
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <LCD_vdWriteCharPos>:

void LCD_vdWriteCharPos(unsigned char data,unsigned char row,unsigned char col){
 674:	cf 93       	push	r28
 676:	c8 2f       	mov	r28, r24
		LCD_vdSendCom(row|col);	//set the cursor
 678:	86 2f       	mov	r24, r22
 67a:	84 2b       	or	r24, r20
 67c:	0e 94 03 02 	call	0x406	; 0x406 <LCD_vdSendCom>
		LCD_vdWriteChar(data);
 680:	8c 2f       	mov	r24, r28
 682:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_vdWriteChar>
}
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <LCD_vdWriteStringPos>:

void LCD_vdWriteStringPos(char *ptr,unsigned char row,unsigned char col)
{
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	06 2f       	mov	r16, r22
	unsigned char temp = col;
	for (int i=0;ptr[i]!='\0';i++)
 696:	88 81       	ld	r24, Y
 698:	88 23       	and	r24, r24
 69a:	51 f0       	breq	.+20     	; 0x6b0 <LCD_vdWriteStringPos+0x26>
 69c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vdWriteCharPos(ptr[i],row,temp++);
 69e:	11 e0       	ldi	r17, 0x01	; 1
 6a0:	14 0f       	add	r17, r20
 6a2:	60 2f       	mov	r22, r16
 6a4:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_vdWriteCharPos>
}

void LCD_vdWriteStringPos(char *ptr,unsigned char row,unsigned char col)
{
	unsigned char temp = col;
	for (int i=0;ptr[i]!='\0';i++)
 6a8:	89 91       	ld	r24, Y+
	{
		LCD_vdWriteCharPos(ptr[i],row,temp++);
 6aa:	41 2f       	mov	r20, r17
}

void LCD_vdWriteStringPos(char *ptr,unsigned char row,unsigned char col)
{
	unsigned char temp = col;
	for (int i=0;ptr[i]!='\0';i++)
 6ac:	81 11       	cpse	r24, r1
 6ae:	f7 cf       	rjmp	.-18     	; 0x69e <LCD_vdWriteStringPos+0x14>
	{
		LCD_vdWriteCharPos(ptr[i],row,temp++);
	}
}
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	Sch_vdInit();
 6ba:	0e 94 68 03 	call	0x6d0	; 0x6d0 <Sch_vdInit>

    while (1) 
    {
		Sch_vdEngine();
 6be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Sch_vdEngine>
    }
 6c2:	fd cf       	rjmp	.-6      	; 0x6be <main+0x4>

000006c4 <SCH_vdTick>:
	APP_vdWelcome();
	SPI_vdSSenable();
}

void SCH_vdTick(){
	c++;
 6c4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <c>
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <c>
 6ce:	08 95       	ret

000006d0 <Sch_vdInit>:

static unsigned char c = 0;

void Sch_vdInit(){
	
	DIO_vdInit();
 6d0:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_vdInit>
	TIMER0_vdInit(SCH_vdTick);
 6d4:	82 e6       	ldi	r24, 0x62	; 98
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <TIMER0_vdInit>
	LCD_vdInit(MODE_4_BITS);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_vdInit>
	SPI_vdInit(MASTER);
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	0e 94 af 03 	call	0x75e	; 0x75e <SPI_vdInit>
	APP_vdWelcome();
 6e8:	0e 94 49 00 	call	0x92	; 0x92 <APP_vdWelcome>
	SPI_vdSSenable();
 6ec:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <SPI_vdSSenable>
 6f0:	08 95       	ret

000006f2 <Sch_vdEngine>:

void SCH_vdTick(){
	c++;
}
	
void Sch_vdEngine(){
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
	static unsigned char temp = 0;
	if(((c%2)==0) && (c-temp)){
 6f6:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <c>
 6fa:	80 fd       	sbrc	r24, 0
 6fc:	0e c0       	rjmp	.+28     	; 0x71a <Sch_vdEngine+0x28>
 6fe:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <temp.1556>
 702:	89 17       	cp	r24, r25
 704:	51 f0       	breq	.+20     	; 0x71a <Sch_vdEngine+0x28>
		BTN_vdRead('A',0);
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	81 e4       	ldi	r24, 0x41	; 65
 70a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <BTN_vdRead>
		APP_vdBTN();
 70e:	0e 94 88 00 	call	0x110	; 0x110 <APP_vdBTN>
		
		temp = c;
 712:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <c>
 716:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <temp.1556>
	}
	if( ((c%400)==0) && ( (c-temp)|((c%2)==0) ) ){
 71a:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <c>
 71e:	24 2f       	mov	r18, r20
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	c9 01       	movw	r24, r18
 724:	60 e9       	ldi	r22, 0x90	; 144
 726:	71 e0       	ldi	r23, 0x01	; 1
 728:	0e 94 16 04 	call	0x82c	; 0x82c <__divmodhi4>
 72c:	89 2b       	or	r24, r25
 72e:	a1 f4       	brne	.+40     	; 0x758 <Sch_vdEngine+0x66>
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	48 27       	eor	r20, r24
 734:	41 70       	andi	r20, 0x01	; 1
 736:	c4 2f       	mov	r28, r20
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	d8 2f       	mov	r29, r24
 73c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <temp.1556>
 740:	28 1b       	sub	r18, r24
 742:	31 09       	sbc	r19, r1
 744:	2c 2b       	or	r18, r28
 746:	3d 2b       	or	r19, r29
 748:	23 2b       	or	r18, r19
 74a:	31 f0       	breq	.+12     	; 0x758 <Sch_vdEngine+0x66>
		APP_vdCounter();
 74c:	0e 94 56 00 	call	0xac	; 0xac <APP_vdCounter>
		
		temp = c;
 750:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <c>
 754:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <temp.1556>
	}	
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <SPI_vdInit>:
	if(mode == MASTER){
		SPDR = 0xFF;	/*Since writing to SPDR generates SCK for transmission, write dummy data in SPDR register.*/
	}
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
	return(SPDR);			/* Return received data */
}
 75e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <mode>
 762:	88 23       	and	r24, r24
 764:	19 f0       	breq	.+6      	; 0x76c <SPI_vdInit+0xe>
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	41 f0       	breq	.+16     	; 0x77a <SPI_vdInit+0x1c>
 76a:	0b c0       	rjmp	.+22     	; 0x782 <SPI_vdInit+0x24>
 76c:	87 b3       	in	r24, 0x17	; 23
 76e:	80 6b       	ori	r24, 0xB0	; 176
 770:	87 bb       	out	0x17, r24	; 23
 772:	c4 9a       	sbi	0x18, 4	; 24
 774:	be 98       	cbi	0x17, 6	; 23
 776:	6c 9a       	sbi	0x0d, 4	; 13
 778:	04 c0       	rjmp	.+8      	; 0x782 <SPI_vdInit+0x24>
 77a:	be 9a       	sbi	0x17, 6	; 23
 77c:	87 b3       	in	r24, 0x17	; 23
 77e:	8f 74       	andi	r24, 0x4F	; 79
 780:	87 bb       	out	0x17, r24	; 23
 782:	6e 9a       	sbi	0x0d, 6	; 13
 784:	08 95       	ret

00000786 <SPI_vdSendByte>:
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	1f 92       	push	r1
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	8f b9       	out	0x0f, r24	; 15
 792:	77 9b       	sbis	0x0e, 7	; 14
 794:	fe cf       	rjmp	.-4      	; 0x792 <SPI_vdSendByte+0xc>
 796:	8f b1       	in	r24, 0x0f	; 15
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	0f 90       	pop	r0
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <SPI_vdSSenable>:

void SPI_vdSSenable(){
	PORTB &= ~(1<<SS);
 7a2:	c4 98       	cbi	0x18, 4	; 24
 7a4:	08 95       	ret

000007a6 <TIMER0_vdInit>:

static void (*fptr)(void);

void TIMER0_vdInit(void (*ptr)(void)){
/*TIMER0 initialization*/
TCCR0 |= (1<<0); TCCR0 &= ~(1<<1); TCCR0 |= (1<<2);		//clock select: CLK/1024
 7a6:	23 b7       	in	r18, 0x33	; 51
 7a8:	21 60       	ori	r18, 0x01	; 1
 7aa:	23 bf       	out	0x33, r18	; 51
 7ac:	23 b7       	in	r18, 0x33	; 51
 7ae:	2d 7f       	andi	r18, 0xFD	; 253
 7b0:	23 bf       	out	0x33, r18	; 51
 7b2:	23 b7       	in	r18, 0x33	; 51
 7b4:	24 60       	ori	r18, 0x04	; 4
 7b6:	23 bf       	out	0x33, r18	; 51
TIMSK |= (1<<1);										//Output compare Interrupt Enable
 7b8:	29 b7       	in	r18, 0x39	; 57
 7ba:	22 60       	ori	r18, 0x02	; 2
 7bc:	29 bf       	out	0x39, r18	; 57
TCCR0 &= ~(1<<6); TCCR0 |= (1<<3);						//mode: CTC
 7be:	23 b7       	in	r18, 0x33	; 51
 7c0:	2f 7b       	andi	r18, 0xBF	; 191
 7c2:	23 bf       	out	0x33, r18	; 51
 7c4:	23 b7       	in	r18, 0x33	; 51
 7c6:	28 60       	ori	r18, 0x08	; 8
 7c8:	23 bf       	out	0x33, r18	; 51
OCR0 = 10;												// F_CPU/pre_scalar * 10 ms
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	2c bf       	out	0x3c, r18	; 60
SREG |= (1<<7);											//Global Interrupt Enable
 7ce:	2f b7       	in	r18, 0x3f	; 63
 7d0:	20 68       	ori	r18, 0x80	; 128
 7d2:	2f bf       	out	0x3f, r18	; 63

/*passing the Tick increasing function to ISR*/
fptr = ptr;
 7d4:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <fptr+0x1>
 7d8:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <fptr>
 7dc:	08 95       	ret

000007de <__vector_19>:
}

ISR(TIMER0_COMP_vect){
 7de:	1f 92       	push	r1
 7e0:	0f 92       	push	r0
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	0f 92       	push	r0
 7e6:	11 24       	eor	r1, r1
 7e8:	2f 93       	push	r18
 7ea:	3f 93       	push	r19
 7ec:	4f 93       	push	r20
 7ee:	5f 93       	push	r21
 7f0:	6f 93       	push	r22
 7f2:	7f 93       	push	r23
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	ef 93       	push	r30
 7fe:	ff 93       	push	r31
	fptr();
 800:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <fptr>
 804:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <fptr+0x1>
 808:	09 95       	icall
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	bf 91       	pop	r27
 810:	af 91       	pop	r26
 812:	9f 91       	pop	r25
 814:	8f 91       	pop	r24
 816:	7f 91       	pop	r23
 818:	6f 91       	pop	r22
 81a:	5f 91       	pop	r21
 81c:	4f 91       	pop	r20
 81e:	3f 91       	pop	r19
 820:	2f 91       	pop	r18
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <__divmodhi4>:
 82c:	97 fb       	bst	r25, 7
 82e:	07 2e       	mov	r0, r23
 830:	16 f4       	brtc	.+4      	; 0x836 <__divmodhi4+0xa>
 832:	00 94       	com	r0
 834:	07 d0       	rcall	.+14     	; 0x844 <__divmodhi4_neg1>
 836:	77 fd       	sbrc	r23, 7
 838:	09 d0       	rcall	.+18     	; 0x84c <__divmodhi4_neg2>
 83a:	0e 94 2a 04 	call	0x854	; 0x854 <__udivmodhi4>
 83e:	07 fc       	sbrc	r0, 7
 840:	05 d0       	rcall	.+10     	; 0x84c <__divmodhi4_neg2>
 842:	3e f4       	brtc	.+14     	; 0x852 <__divmodhi4_exit>

00000844 <__divmodhi4_neg1>:
 844:	90 95       	com	r25
 846:	81 95       	neg	r24
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	08 95       	ret

0000084c <__divmodhi4_neg2>:
 84c:	70 95       	com	r23
 84e:	61 95       	neg	r22
 850:	7f 4f       	sbci	r23, 0xFF	; 255

00000852 <__divmodhi4_exit>:
 852:	08 95       	ret

00000854 <__udivmodhi4>:
 854:	aa 1b       	sub	r26, r26
 856:	bb 1b       	sub	r27, r27
 858:	51 e1       	ldi	r21, 0x11	; 17
 85a:	07 c0       	rjmp	.+14     	; 0x86a <__udivmodhi4_ep>

0000085c <__udivmodhi4_loop>:
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	a6 17       	cp	r26, r22
 862:	b7 07       	cpc	r27, r23
 864:	10 f0       	brcs	.+4      	; 0x86a <__udivmodhi4_ep>
 866:	a6 1b       	sub	r26, r22
 868:	b7 0b       	sbc	r27, r23

0000086a <__udivmodhi4_ep>:
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	5a 95       	dec	r21
 870:	a9 f7       	brne	.-22     	; 0x85c <__udivmodhi4_loop>
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	bc 01       	movw	r22, r24
 878:	cd 01       	movw	r24, r26
 87a:	08 95       	ret

0000087c <sprintf>:
 87c:	ae e0       	ldi	r26, 0x0E	; 14
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	e4 e4       	ldi	r30, 0x44	; 68
 882:	f4 e0       	ldi	r31, 0x04	; 4
 884:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__prologue_saves__+0x1c>
 888:	0d 89       	ldd	r16, Y+21	; 0x15
 88a:	1e 89       	ldd	r17, Y+22	; 0x16
 88c:	86 e0       	ldi	r24, 0x06	; 6
 88e:	8c 83       	std	Y+4, r24	; 0x04
 890:	1a 83       	std	Y+2, r17	; 0x02
 892:	09 83       	std	Y+1, r16	; 0x01
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	9f e7       	ldi	r25, 0x7F	; 127
 898:	9e 83       	std	Y+6, r25	; 0x06
 89a:	8d 83       	std	Y+5, r24	; 0x05
 89c:	ae 01       	movw	r20, r28
 89e:	47 5e       	subi	r20, 0xE7	; 231
 8a0:	5f 4f       	sbci	r21, 0xFF	; 255
 8a2:	6f 89       	ldd	r22, Y+23	; 0x17
 8a4:	78 8d       	ldd	r23, Y+24	; 0x18
 8a6:	ce 01       	movw	r24, r28
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	0e 94 61 04 	call	0x8c2	; 0x8c2 <vfprintf>
 8ae:	2f 81       	ldd	r18, Y+7	; 0x07
 8b0:	38 85       	ldd	r19, Y+8	; 0x08
 8b2:	f8 01       	movw	r30, r16
 8b4:	e2 0f       	add	r30, r18
 8b6:	f3 1f       	adc	r31, r19
 8b8:	10 82       	st	Z, r1
 8ba:	2e 96       	adiw	r28, 0x0e	; 14
 8bc:	e4 e0       	ldi	r30, 0x04	; 4
 8be:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__epilogue_restores__+0x1c>

000008c2 <vfprintf>:
 8c2:	ac e0       	ldi	r26, 0x0C	; 12
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e7 e6       	ldi	r30, 0x67	; 103
 8c8:	f4 e0       	ldi	r31, 0x04	; 4
 8ca:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__prologue_saves__>
 8ce:	7c 01       	movw	r14, r24
 8d0:	6b 01       	movw	r12, r22
 8d2:	8a 01       	movw	r16, r20
 8d4:	fc 01       	movw	r30, r24
 8d6:	17 82       	std	Z+7, r1	; 0x07
 8d8:	16 82       	std	Z+6, r1	; 0x06
 8da:	83 81       	ldd	r24, Z+3	; 0x03
 8dc:	81 ff       	sbrs	r24, 1
 8de:	bd c1       	rjmp	.+890    	; 0xc5a <vfprintf+0x398>
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	4c 01       	movw	r8, r24
 8e6:	f7 01       	movw	r30, r14
 8e8:	93 81       	ldd	r25, Z+3	; 0x03
 8ea:	f6 01       	movw	r30, r12
 8ec:	93 fd       	sbrc	r25, 3
 8ee:	85 91       	lpm	r24, Z+
 8f0:	93 ff       	sbrs	r25, 3
 8f2:	81 91       	ld	r24, Z+
 8f4:	6f 01       	movw	r12, r30
 8f6:	88 23       	and	r24, r24
 8f8:	09 f4       	brne	.+2      	; 0x8fc <vfprintf+0x3a>
 8fa:	ab c1       	rjmp	.+854    	; 0xc52 <vfprintf+0x390>
 8fc:	85 32       	cpi	r24, 0x25	; 37
 8fe:	39 f4       	brne	.+14     	; 0x90e <vfprintf+0x4c>
 900:	93 fd       	sbrc	r25, 3
 902:	85 91       	lpm	r24, Z+
 904:	93 ff       	sbrs	r25, 3
 906:	81 91       	ld	r24, Z+
 908:	6f 01       	movw	r12, r30
 90a:	85 32       	cpi	r24, 0x25	; 37
 90c:	29 f4       	brne	.+10     	; 0x918 <vfprintf+0x56>
 90e:	b7 01       	movw	r22, r14
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 916:	e7 cf       	rjmp	.-50     	; 0x8e6 <vfprintf+0x24>
 918:	51 2c       	mov	r5, r1
 91a:	31 2c       	mov	r3, r1
 91c:	20 e0       	ldi	r18, 0x00	; 0
 91e:	20 32       	cpi	r18, 0x20	; 32
 920:	a0 f4       	brcc	.+40     	; 0x94a <vfprintf+0x88>
 922:	8b 32       	cpi	r24, 0x2B	; 43
 924:	69 f0       	breq	.+26     	; 0x940 <vfprintf+0x7e>
 926:	30 f4       	brcc	.+12     	; 0x934 <vfprintf+0x72>
 928:	80 32       	cpi	r24, 0x20	; 32
 92a:	59 f0       	breq	.+22     	; 0x942 <vfprintf+0x80>
 92c:	83 32       	cpi	r24, 0x23	; 35
 92e:	69 f4       	brne	.+26     	; 0x94a <vfprintf+0x88>
 930:	20 61       	ori	r18, 0x10	; 16
 932:	2c c0       	rjmp	.+88     	; 0x98c <vfprintf+0xca>
 934:	8d 32       	cpi	r24, 0x2D	; 45
 936:	39 f0       	breq	.+14     	; 0x946 <vfprintf+0x84>
 938:	80 33       	cpi	r24, 0x30	; 48
 93a:	39 f4       	brne	.+14     	; 0x94a <vfprintf+0x88>
 93c:	21 60       	ori	r18, 0x01	; 1
 93e:	26 c0       	rjmp	.+76     	; 0x98c <vfprintf+0xca>
 940:	22 60       	ori	r18, 0x02	; 2
 942:	24 60       	ori	r18, 0x04	; 4
 944:	23 c0       	rjmp	.+70     	; 0x98c <vfprintf+0xca>
 946:	28 60       	ori	r18, 0x08	; 8
 948:	21 c0       	rjmp	.+66     	; 0x98c <vfprintf+0xca>
 94a:	27 fd       	sbrc	r18, 7
 94c:	27 c0       	rjmp	.+78     	; 0x99c <vfprintf+0xda>
 94e:	30 ed       	ldi	r19, 0xD0	; 208
 950:	38 0f       	add	r19, r24
 952:	3a 30       	cpi	r19, 0x0A	; 10
 954:	78 f4       	brcc	.+30     	; 0x974 <vfprintf+0xb2>
 956:	26 ff       	sbrs	r18, 6
 958:	06 c0       	rjmp	.+12     	; 0x966 <vfprintf+0xa4>
 95a:	fa e0       	ldi	r31, 0x0A	; 10
 95c:	5f 9e       	mul	r5, r31
 95e:	30 0d       	add	r19, r0
 960:	11 24       	eor	r1, r1
 962:	53 2e       	mov	r5, r19
 964:	13 c0       	rjmp	.+38     	; 0x98c <vfprintf+0xca>
 966:	8a e0       	ldi	r24, 0x0A	; 10
 968:	38 9e       	mul	r3, r24
 96a:	30 0d       	add	r19, r0
 96c:	11 24       	eor	r1, r1
 96e:	33 2e       	mov	r3, r19
 970:	20 62       	ori	r18, 0x20	; 32
 972:	0c c0       	rjmp	.+24     	; 0x98c <vfprintf+0xca>
 974:	8e 32       	cpi	r24, 0x2E	; 46
 976:	21 f4       	brne	.+8      	; 0x980 <vfprintf+0xbe>
 978:	26 fd       	sbrc	r18, 6
 97a:	6b c1       	rjmp	.+726    	; 0xc52 <vfprintf+0x390>
 97c:	20 64       	ori	r18, 0x40	; 64
 97e:	06 c0       	rjmp	.+12     	; 0x98c <vfprintf+0xca>
 980:	8c 36       	cpi	r24, 0x6C	; 108
 982:	11 f4       	brne	.+4      	; 0x988 <vfprintf+0xc6>
 984:	20 68       	ori	r18, 0x80	; 128
 986:	02 c0       	rjmp	.+4      	; 0x98c <vfprintf+0xca>
 988:	88 36       	cpi	r24, 0x68	; 104
 98a:	41 f4       	brne	.+16     	; 0x99c <vfprintf+0xda>
 98c:	f6 01       	movw	r30, r12
 98e:	93 fd       	sbrc	r25, 3
 990:	85 91       	lpm	r24, Z+
 992:	93 ff       	sbrs	r25, 3
 994:	81 91       	ld	r24, Z+
 996:	6f 01       	movw	r12, r30
 998:	81 11       	cpse	r24, r1
 99a:	c1 cf       	rjmp	.-126    	; 0x91e <vfprintf+0x5c>
 99c:	98 2f       	mov	r25, r24
 99e:	9f 7d       	andi	r25, 0xDF	; 223
 9a0:	95 54       	subi	r25, 0x45	; 69
 9a2:	93 30       	cpi	r25, 0x03	; 3
 9a4:	28 f4       	brcc	.+10     	; 0x9b0 <vfprintf+0xee>
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	ff e3       	ldi	r31, 0x3F	; 63
 9ac:	f9 83       	std	Y+1, r31	; 0x01
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <vfprintf+0x108>
 9b0:	83 36       	cpi	r24, 0x63	; 99
 9b2:	31 f0       	breq	.+12     	; 0x9c0 <vfprintf+0xfe>
 9b4:	83 37       	cpi	r24, 0x73	; 115
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <vfprintf+0x112>
 9b8:	83 35       	cpi	r24, 0x53	; 83
 9ba:	09 f0       	breq	.+2      	; 0x9be <vfprintf+0xfc>
 9bc:	5b c0       	rjmp	.+182    	; 0xa74 <vfprintf+0x1b2>
 9be:	22 c0       	rjmp	.+68     	; 0xa04 <vfprintf+0x142>
 9c0:	f8 01       	movw	r30, r16
 9c2:	80 81       	ld	r24, Z
 9c4:	89 83       	std	Y+1, r24	; 0x01
 9c6:	0e 5f       	subi	r16, 0xFE	; 254
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	44 24       	eor	r4, r4
 9cc:	43 94       	inc	r4
 9ce:	51 2c       	mov	r5, r1
 9d0:	54 01       	movw	r10, r8
 9d2:	15 c0       	rjmp	.+42     	; 0x9fe <vfprintf+0x13c>
 9d4:	38 01       	movw	r6, r16
 9d6:	f2 e0       	ldi	r31, 0x02	; 2
 9d8:	6f 0e       	add	r6, r31
 9da:	71 1c       	adc	r7, r1
 9dc:	f8 01       	movw	r30, r16
 9de:	a0 80       	ld	r10, Z
 9e0:	b1 80       	ldd	r11, Z+1	; 0x01
 9e2:	26 ff       	sbrs	r18, 6
 9e4:	03 c0       	rjmp	.+6      	; 0x9ec <vfprintf+0x12a>
 9e6:	65 2d       	mov	r22, r5
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0x12e>
 9ec:	6f ef       	ldi	r22, 0xFF	; 255
 9ee:	7f ef       	ldi	r23, 0xFF	; 255
 9f0:	c5 01       	movw	r24, r10
 9f2:	2c 87       	std	Y+12, r18	; 0x0c
 9f4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <strnlen>
 9f8:	2c 01       	movw	r4, r24
 9fa:	83 01       	movw	r16, r6
 9fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 9fe:	2f 77       	andi	r18, 0x7F	; 127
 a00:	22 2e       	mov	r2, r18
 a02:	17 c0       	rjmp	.+46     	; 0xa32 <vfprintf+0x170>
 a04:	38 01       	movw	r6, r16
 a06:	f2 e0       	ldi	r31, 0x02	; 2
 a08:	6f 0e       	add	r6, r31
 a0a:	71 1c       	adc	r7, r1
 a0c:	f8 01       	movw	r30, r16
 a0e:	a0 80       	ld	r10, Z
 a10:	b1 80       	ldd	r11, Z+1	; 0x01
 a12:	26 ff       	sbrs	r18, 6
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <vfprintf+0x15a>
 a16:	65 2d       	mov	r22, r5
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <vfprintf+0x15e>
 a1c:	6f ef       	ldi	r22, 0xFF	; 255
 a1e:	7f ef       	ldi	r23, 0xFF	; 255
 a20:	c5 01       	movw	r24, r10
 a22:	2c 87       	std	Y+12, r18	; 0x0c
 a24:	0e 94 33 06 	call	0xc66	; 0xc66 <strnlen_P>
 a28:	2c 01       	movw	r4, r24
 a2a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a2c:	20 68       	ori	r18, 0x80	; 128
 a2e:	22 2e       	mov	r2, r18
 a30:	83 01       	movw	r16, r6
 a32:	23 fc       	sbrc	r2, 3
 a34:	1b c0       	rjmp	.+54     	; 0xa6c <vfprintf+0x1aa>
 a36:	83 2d       	mov	r24, r3
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	48 16       	cp	r4, r24
 a3c:	59 06       	cpc	r5, r25
 a3e:	b0 f4       	brcc	.+44     	; 0xa6c <vfprintf+0x1aa>
 a40:	b7 01       	movw	r22, r14
 a42:	80 e2       	ldi	r24, 0x20	; 32
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 a4a:	3a 94       	dec	r3
 a4c:	f4 cf       	rjmp	.-24     	; 0xa36 <vfprintf+0x174>
 a4e:	f5 01       	movw	r30, r10
 a50:	27 fc       	sbrc	r2, 7
 a52:	85 91       	lpm	r24, Z+
 a54:	27 fe       	sbrs	r2, 7
 a56:	81 91       	ld	r24, Z+
 a58:	5f 01       	movw	r10, r30
 a5a:	b7 01       	movw	r22, r14
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 a62:	31 10       	cpse	r3, r1
 a64:	3a 94       	dec	r3
 a66:	f1 e0       	ldi	r31, 0x01	; 1
 a68:	4f 1a       	sub	r4, r31
 a6a:	51 08       	sbc	r5, r1
 a6c:	41 14       	cp	r4, r1
 a6e:	51 04       	cpc	r5, r1
 a70:	71 f7       	brne	.-36     	; 0xa4e <vfprintf+0x18c>
 a72:	e5 c0       	rjmp	.+458    	; 0xc3e <vfprintf+0x37c>
 a74:	84 36       	cpi	r24, 0x64	; 100
 a76:	11 f0       	breq	.+4      	; 0xa7c <vfprintf+0x1ba>
 a78:	89 36       	cpi	r24, 0x69	; 105
 a7a:	39 f5       	brne	.+78     	; 0xaca <vfprintf+0x208>
 a7c:	f8 01       	movw	r30, r16
 a7e:	27 ff       	sbrs	r18, 7
 a80:	07 c0       	rjmp	.+14     	; 0xa90 <vfprintf+0x1ce>
 a82:	60 81       	ld	r22, Z
 a84:	71 81       	ldd	r23, Z+1	; 0x01
 a86:	82 81       	ldd	r24, Z+2	; 0x02
 a88:	93 81       	ldd	r25, Z+3	; 0x03
 a8a:	0c 5f       	subi	r16, 0xFC	; 252
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <vfprintf+0x1de>
 a90:	60 81       	ld	r22, Z
 a92:	71 81       	ldd	r23, Z+1	; 0x01
 a94:	07 2e       	mov	r0, r23
 a96:	00 0c       	add	r0, r0
 a98:	88 0b       	sbc	r24, r24
 a9a:	99 0b       	sbc	r25, r25
 a9c:	0e 5f       	subi	r16, 0xFE	; 254
 a9e:	1f 4f       	sbci	r17, 0xFF	; 255
 aa0:	2f 76       	andi	r18, 0x6F	; 111
 aa2:	72 2e       	mov	r7, r18
 aa4:	97 ff       	sbrs	r25, 7
 aa6:	09 c0       	rjmp	.+18     	; 0xaba <vfprintf+0x1f8>
 aa8:	90 95       	com	r25
 aaa:	80 95       	com	r24
 aac:	70 95       	com	r23
 aae:	61 95       	neg	r22
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	20 68       	ori	r18, 0x80	; 128
 ab8:	72 2e       	mov	r7, r18
 aba:	2a e0       	ldi	r18, 0x0A	; 10
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	a4 01       	movw	r20, r8
 ac0:	0e 94 81 06 	call	0xd02	; 0xd02 <__ultoa_invert>
 ac4:	a8 2e       	mov	r10, r24
 ac6:	a8 18       	sub	r10, r8
 ac8:	44 c0       	rjmp	.+136    	; 0xb52 <vfprintf+0x290>
 aca:	85 37       	cpi	r24, 0x75	; 117
 acc:	29 f4       	brne	.+10     	; 0xad8 <vfprintf+0x216>
 ace:	2f 7e       	andi	r18, 0xEF	; 239
 ad0:	b2 2e       	mov	r11, r18
 ad2:	2a e0       	ldi	r18, 0x0A	; 10
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	25 c0       	rjmp	.+74     	; 0xb22 <vfprintf+0x260>
 ad8:	f2 2f       	mov	r31, r18
 ada:	f9 7f       	andi	r31, 0xF9	; 249
 adc:	bf 2e       	mov	r11, r31
 ade:	8f 36       	cpi	r24, 0x6F	; 111
 ae0:	c1 f0       	breq	.+48     	; 0xb12 <vfprintf+0x250>
 ae2:	18 f4       	brcc	.+6      	; 0xaea <vfprintf+0x228>
 ae4:	88 35       	cpi	r24, 0x58	; 88
 ae6:	79 f0       	breq	.+30     	; 0xb06 <vfprintf+0x244>
 ae8:	b4 c0       	rjmp	.+360    	; 0xc52 <vfprintf+0x390>
 aea:	80 37       	cpi	r24, 0x70	; 112
 aec:	19 f0       	breq	.+6      	; 0xaf4 <vfprintf+0x232>
 aee:	88 37       	cpi	r24, 0x78	; 120
 af0:	21 f0       	breq	.+8      	; 0xafa <vfprintf+0x238>
 af2:	af c0       	rjmp	.+350    	; 0xc52 <vfprintf+0x390>
 af4:	2f 2f       	mov	r18, r31
 af6:	20 61       	ori	r18, 0x10	; 16
 af8:	b2 2e       	mov	r11, r18
 afa:	b4 fe       	sbrs	r11, 4
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x256>
 afe:	8b 2d       	mov	r24, r11
 b00:	84 60       	ori	r24, 0x04	; 4
 b02:	b8 2e       	mov	r11, r24
 b04:	09 c0       	rjmp	.+18     	; 0xb18 <vfprintf+0x256>
 b06:	24 ff       	sbrs	r18, 4
 b08:	0a c0       	rjmp	.+20     	; 0xb1e <vfprintf+0x25c>
 b0a:	9f 2f       	mov	r25, r31
 b0c:	96 60       	ori	r25, 0x06	; 6
 b0e:	b9 2e       	mov	r11, r25
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <vfprintf+0x25c>
 b12:	28 e0       	ldi	r18, 0x08	; 8
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	05 c0       	rjmp	.+10     	; 0xb22 <vfprintf+0x260>
 b18:	20 e1       	ldi	r18, 0x10	; 16
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <vfprintf+0x260>
 b1e:	20 e1       	ldi	r18, 0x10	; 16
 b20:	32 e0       	ldi	r19, 0x02	; 2
 b22:	f8 01       	movw	r30, r16
 b24:	b7 fe       	sbrs	r11, 7
 b26:	07 c0       	rjmp	.+14     	; 0xb36 <vfprintf+0x274>
 b28:	60 81       	ld	r22, Z
 b2a:	71 81       	ldd	r23, Z+1	; 0x01
 b2c:	82 81       	ldd	r24, Z+2	; 0x02
 b2e:	93 81       	ldd	r25, Z+3	; 0x03
 b30:	0c 5f       	subi	r16, 0xFC	; 252
 b32:	1f 4f       	sbci	r17, 0xFF	; 255
 b34:	06 c0       	rjmp	.+12     	; 0xb42 <vfprintf+0x280>
 b36:	60 81       	ld	r22, Z
 b38:	71 81       	ldd	r23, Z+1	; 0x01
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 5f       	subi	r16, 0xFE	; 254
 b40:	1f 4f       	sbci	r17, 0xFF	; 255
 b42:	a4 01       	movw	r20, r8
 b44:	0e 94 81 06 	call	0xd02	; 0xd02 <__ultoa_invert>
 b48:	a8 2e       	mov	r10, r24
 b4a:	a8 18       	sub	r10, r8
 b4c:	fb 2d       	mov	r31, r11
 b4e:	ff 77       	andi	r31, 0x7F	; 127
 b50:	7f 2e       	mov	r7, r31
 b52:	76 fe       	sbrs	r7, 6
 b54:	0b c0       	rjmp	.+22     	; 0xb6c <vfprintf+0x2aa>
 b56:	37 2d       	mov	r19, r7
 b58:	3e 7f       	andi	r19, 0xFE	; 254
 b5a:	a5 14       	cp	r10, r5
 b5c:	50 f4       	brcc	.+20     	; 0xb72 <vfprintf+0x2b0>
 b5e:	74 fe       	sbrs	r7, 4
 b60:	0a c0       	rjmp	.+20     	; 0xb76 <vfprintf+0x2b4>
 b62:	72 fc       	sbrc	r7, 2
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <vfprintf+0x2b4>
 b66:	37 2d       	mov	r19, r7
 b68:	3e 7e       	andi	r19, 0xEE	; 238
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <vfprintf+0x2b4>
 b6c:	ba 2c       	mov	r11, r10
 b6e:	37 2d       	mov	r19, r7
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <vfprintf+0x2b6>
 b72:	ba 2c       	mov	r11, r10
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <vfprintf+0x2b6>
 b76:	b5 2c       	mov	r11, r5
 b78:	34 ff       	sbrs	r19, 4
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <vfprintf+0x2d4>
 b7c:	fe 01       	movw	r30, r28
 b7e:	ea 0d       	add	r30, r10
 b80:	f1 1d       	adc	r31, r1
 b82:	80 81       	ld	r24, Z
 b84:	80 33       	cpi	r24, 0x30	; 48
 b86:	11 f4       	brne	.+4      	; 0xb8c <vfprintf+0x2ca>
 b88:	39 7e       	andi	r19, 0xE9	; 233
 b8a:	09 c0       	rjmp	.+18     	; 0xb9e <vfprintf+0x2dc>
 b8c:	32 ff       	sbrs	r19, 2
 b8e:	06 c0       	rjmp	.+12     	; 0xb9c <vfprintf+0x2da>
 b90:	b3 94       	inc	r11
 b92:	b3 94       	inc	r11
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <vfprintf+0x2dc>
 b96:	83 2f       	mov	r24, r19
 b98:	86 78       	andi	r24, 0x86	; 134
 b9a:	09 f0       	breq	.+2      	; 0xb9e <vfprintf+0x2dc>
 b9c:	b3 94       	inc	r11
 b9e:	33 fd       	sbrc	r19, 3
 ba0:	13 c0       	rjmp	.+38     	; 0xbc8 <vfprintf+0x306>
 ba2:	30 ff       	sbrs	r19, 0
 ba4:	06 c0       	rjmp	.+12     	; 0xbb2 <vfprintf+0x2f0>
 ba6:	5a 2c       	mov	r5, r10
 ba8:	b3 14       	cp	r11, r3
 baa:	18 f4       	brcc	.+6      	; 0xbb2 <vfprintf+0x2f0>
 bac:	53 0c       	add	r5, r3
 bae:	5b 18       	sub	r5, r11
 bb0:	b3 2c       	mov	r11, r3
 bb2:	b3 14       	cp	r11, r3
 bb4:	68 f4       	brcc	.+26     	; 0xbd0 <vfprintf+0x30e>
 bb6:	b7 01       	movw	r22, r14
 bb8:	80 e2       	ldi	r24, 0x20	; 32
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	3c 87       	std	Y+12, r19	; 0x0c
 bbe:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 bc2:	b3 94       	inc	r11
 bc4:	3c 85       	ldd	r19, Y+12	; 0x0c
 bc6:	f5 cf       	rjmp	.-22     	; 0xbb2 <vfprintf+0x2f0>
 bc8:	b3 14       	cp	r11, r3
 bca:	10 f4       	brcc	.+4      	; 0xbd0 <vfprintf+0x30e>
 bcc:	3b 18       	sub	r3, r11
 bce:	01 c0       	rjmp	.+2      	; 0xbd2 <vfprintf+0x310>
 bd0:	31 2c       	mov	r3, r1
 bd2:	34 ff       	sbrs	r19, 4
 bd4:	12 c0       	rjmp	.+36     	; 0xbfa <vfprintf+0x338>
 bd6:	b7 01       	movw	r22, r14
 bd8:	80 e3       	ldi	r24, 0x30	; 48
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	3c 87       	std	Y+12, r19	; 0x0c
 bde:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 be2:	3c 85       	ldd	r19, Y+12	; 0x0c
 be4:	32 ff       	sbrs	r19, 2
 be6:	17 c0       	rjmp	.+46     	; 0xc16 <vfprintf+0x354>
 be8:	31 fd       	sbrc	r19, 1
 bea:	03 c0       	rjmp	.+6      	; 0xbf2 <vfprintf+0x330>
 bec:	88 e7       	ldi	r24, 0x78	; 120
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x334>
 bf2:	88 e5       	ldi	r24, 0x58	; 88
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	b7 01       	movw	r22, r14
 bf8:	0c c0       	rjmp	.+24     	; 0xc12 <vfprintf+0x350>
 bfa:	83 2f       	mov	r24, r19
 bfc:	86 78       	andi	r24, 0x86	; 134
 bfe:	59 f0       	breq	.+22     	; 0xc16 <vfprintf+0x354>
 c00:	31 ff       	sbrs	r19, 1
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0x346>
 c04:	8b e2       	ldi	r24, 0x2B	; 43
 c06:	01 c0       	rjmp	.+2      	; 0xc0a <vfprintf+0x348>
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	37 fd       	sbrc	r19, 7
 c0c:	8d e2       	ldi	r24, 0x2D	; 45
 c0e:	b7 01       	movw	r22, r14
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 c16:	a5 14       	cp	r10, r5
 c18:	38 f4       	brcc	.+14     	; 0xc28 <vfprintf+0x366>
 c1a:	b7 01       	movw	r22, r14
 c1c:	80 e3       	ldi	r24, 0x30	; 48
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 c24:	5a 94       	dec	r5
 c26:	f7 cf       	rjmp	.-18     	; 0xc16 <vfprintf+0x354>
 c28:	aa 94       	dec	r10
 c2a:	f4 01       	movw	r30, r8
 c2c:	ea 0d       	add	r30, r10
 c2e:	f1 1d       	adc	r31, r1
 c30:	80 81       	ld	r24, Z
 c32:	b7 01       	movw	r22, r14
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 c3a:	a1 10       	cpse	r10, r1
 c3c:	f5 cf       	rjmp	.-22     	; 0xc28 <vfprintf+0x366>
 c3e:	33 20       	and	r3, r3
 c40:	09 f4       	brne	.+2      	; 0xc44 <vfprintf+0x382>
 c42:	51 ce       	rjmp	.-862    	; 0x8e6 <vfprintf+0x24>
 c44:	b7 01       	movw	r22, r14
 c46:	80 e2       	ldi	r24, 0x20	; 32
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	0e 94 49 06 	call	0xc92	; 0xc92 <fputc>
 c4e:	3a 94       	dec	r3
 c50:	f6 cf       	rjmp	.-20     	; 0xc3e <vfprintf+0x37c>
 c52:	f7 01       	movw	r30, r14
 c54:	86 81       	ldd	r24, Z+6	; 0x06
 c56:	97 81       	ldd	r25, Z+7	; 0x07
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <vfprintf+0x39c>
 c5a:	8f ef       	ldi	r24, 0xFF	; 255
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	2c 96       	adiw	r28, 0x0c	; 12
 c60:	e2 e1       	ldi	r30, 0x12	; 18
 c62:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__epilogue_restores__>

00000c66 <strnlen_P>:
 c66:	fc 01       	movw	r30, r24
 c68:	05 90       	lpm	r0, Z+
 c6a:	61 50       	subi	r22, 0x01	; 1
 c6c:	70 40       	sbci	r23, 0x00	; 0
 c6e:	01 10       	cpse	r0, r1
 c70:	d8 f7       	brcc	.-10     	; 0xc68 <strnlen_P+0x2>
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	8e 0f       	add	r24, r30
 c78:	9f 1f       	adc	r25, r31
 c7a:	08 95       	ret

00000c7c <strnlen>:
 c7c:	fc 01       	movw	r30, r24
 c7e:	61 50       	subi	r22, 0x01	; 1
 c80:	70 40       	sbci	r23, 0x00	; 0
 c82:	01 90       	ld	r0, Z+
 c84:	01 10       	cpse	r0, r1
 c86:	d8 f7       	brcc	.-10     	; 0xc7e <strnlen+0x2>
 c88:	80 95       	com	r24
 c8a:	90 95       	com	r25
 c8c:	8e 0f       	add	r24, r30
 c8e:	9f 1f       	adc	r25, r31
 c90:	08 95       	ret

00000c92 <fputc>:
 c92:	0f 93       	push	r16
 c94:	1f 93       	push	r17
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
 c9a:	fb 01       	movw	r30, r22
 c9c:	23 81       	ldd	r18, Z+3	; 0x03
 c9e:	21 fd       	sbrc	r18, 1
 ca0:	03 c0       	rjmp	.+6      	; 0xca8 <fputc+0x16>
 ca2:	8f ef       	ldi	r24, 0xFF	; 255
 ca4:	9f ef       	ldi	r25, 0xFF	; 255
 ca6:	28 c0       	rjmp	.+80     	; 0xcf8 <fputc+0x66>
 ca8:	22 ff       	sbrs	r18, 2
 caa:	16 c0       	rjmp	.+44     	; 0xcd8 <fputc+0x46>
 cac:	46 81       	ldd	r20, Z+6	; 0x06
 cae:	57 81       	ldd	r21, Z+7	; 0x07
 cb0:	24 81       	ldd	r18, Z+4	; 0x04
 cb2:	35 81       	ldd	r19, Z+5	; 0x05
 cb4:	42 17       	cp	r20, r18
 cb6:	53 07       	cpc	r21, r19
 cb8:	44 f4       	brge	.+16     	; 0xcca <fputc+0x38>
 cba:	a0 81       	ld	r26, Z
 cbc:	b1 81       	ldd	r27, Z+1	; 0x01
 cbe:	9d 01       	movw	r18, r26
 cc0:	2f 5f       	subi	r18, 0xFF	; 255
 cc2:	3f 4f       	sbci	r19, 0xFF	; 255
 cc4:	31 83       	std	Z+1, r19	; 0x01
 cc6:	20 83       	st	Z, r18
 cc8:	8c 93       	st	X, r24
 cca:	26 81       	ldd	r18, Z+6	; 0x06
 ccc:	37 81       	ldd	r19, Z+7	; 0x07
 cce:	2f 5f       	subi	r18, 0xFF	; 255
 cd0:	3f 4f       	sbci	r19, 0xFF	; 255
 cd2:	37 83       	std	Z+7, r19	; 0x07
 cd4:	26 83       	std	Z+6, r18	; 0x06
 cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <fputc+0x66>
 cd8:	eb 01       	movw	r28, r22
 cda:	09 2f       	mov	r16, r25
 cdc:	18 2f       	mov	r17, r24
 cde:	00 84       	ldd	r0, Z+8	; 0x08
 ce0:	f1 85       	ldd	r31, Z+9	; 0x09
 ce2:	e0 2d       	mov	r30, r0
 ce4:	09 95       	icall
 ce6:	89 2b       	or	r24, r25
 ce8:	e1 f6       	brne	.-72     	; 0xca2 <fputc+0x10>
 cea:	8e 81       	ldd	r24, Y+6	; 0x06
 cec:	9f 81       	ldd	r25, Y+7	; 0x07
 cee:	01 96       	adiw	r24, 0x01	; 1
 cf0:	9f 83       	std	Y+7, r25	; 0x07
 cf2:	8e 83       	std	Y+6, r24	; 0x06
 cf4:	81 2f       	mov	r24, r17
 cf6:	90 2f       	mov	r25, r16
 cf8:	df 91       	pop	r29
 cfa:	cf 91       	pop	r28
 cfc:	1f 91       	pop	r17
 cfe:	0f 91       	pop	r16
 d00:	08 95       	ret

00000d02 <__ultoa_invert>:
 d02:	fa 01       	movw	r30, r20
 d04:	aa 27       	eor	r26, r26
 d06:	28 30       	cpi	r18, 0x08	; 8
 d08:	51 f1       	breq	.+84     	; 0xd5e <__ultoa_invert+0x5c>
 d0a:	20 31       	cpi	r18, 0x10	; 16
 d0c:	81 f1       	breq	.+96     	; 0xd6e <__ultoa_invert+0x6c>
 d0e:	e8 94       	clt
 d10:	6f 93       	push	r22
 d12:	6e 7f       	andi	r22, 0xFE	; 254
 d14:	6e 5f       	subi	r22, 0xFE	; 254
 d16:	7f 4f       	sbci	r23, 0xFF	; 255
 d18:	8f 4f       	sbci	r24, 0xFF	; 255
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	af 4f       	sbci	r26, 0xFF	; 255
 d1e:	b1 e0       	ldi	r27, 0x01	; 1
 d20:	3e d0       	rcall	.+124    	; 0xd9e <__ultoa_invert+0x9c>
 d22:	b4 e0       	ldi	r27, 0x04	; 4
 d24:	3c d0       	rcall	.+120    	; 0xd9e <__ultoa_invert+0x9c>
 d26:	67 0f       	add	r22, r23
 d28:	78 1f       	adc	r23, r24
 d2a:	89 1f       	adc	r24, r25
 d2c:	9a 1f       	adc	r25, r26
 d2e:	a1 1d       	adc	r26, r1
 d30:	68 0f       	add	r22, r24
 d32:	79 1f       	adc	r23, r25
 d34:	8a 1f       	adc	r24, r26
 d36:	91 1d       	adc	r25, r1
 d38:	a1 1d       	adc	r26, r1
 d3a:	6a 0f       	add	r22, r26
 d3c:	71 1d       	adc	r23, r1
 d3e:	81 1d       	adc	r24, r1
 d40:	91 1d       	adc	r25, r1
 d42:	a1 1d       	adc	r26, r1
 d44:	20 d0       	rcall	.+64     	; 0xd86 <__ultoa_invert+0x84>
 d46:	09 f4       	brne	.+2      	; 0xd4a <__ultoa_invert+0x48>
 d48:	68 94       	set
 d4a:	3f 91       	pop	r19
 d4c:	2a e0       	ldi	r18, 0x0A	; 10
 d4e:	26 9f       	mul	r18, r22
 d50:	11 24       	eor	r1, r1
 d52:	30 19       	sub	r19, r0
 d54:	30 5d       	subi	r19, 0xD0	; 208
 d56:	31 93       	st	Z+, r19
 d58:	de f6       	brtc	.-74     	; 0xd10 <__ultoa_invert+0xe>
 d5a:	cf 01       	movw	r24, r30
 d5c:	08 95       	ret
 d5e:	46 2f       	mov	r20, r22
 d60:	47 70       	andi	r20, 0x07	; 7
 d62:	40 5d       	subi	r20, 0xD0	; 208
 d64:	41 93       	st	Z+, r20
 d66:	b3 e0       	ldi	r27, 0x03	; 3
 d68:	0f d0       	rcall	.+30     	; 0xd88 <__ultoa_invert+0x86>
 d6a:	c9 f7       	brne	.-14     	; 0xd5e <__ultoa_invert+0x5c>
 d6c:	f6 cf       	rjmp	.-20     	; 0xd5a <__ultoa_invert+0x58>
 d6e:	46 2f       	mov	r20, r22
 d70:	4f 70       	andi	r20, 0x0F	; 15
 d72:	40 5d       	subi	r20, 0xD0	; 208
 d74:	4a 33       	cpi	r20, 0x3A	; 58
 d76:	18 f0       	brcs	.+6      	; 0xd7e <__ultoa_invert+0x7c>
 d78:	49 5d       	subi	r20, 0xD9	; 217
 d7a:	31 fd       	sbrc	r19, 1
 d7c:	40 52       	subi	r20, 0x20	; 32
 d7e:	41 93       	st	Z+, r20
 d80:	02 d0       	rcall	.+4      	; 0xd86 <__ultoa_invert+0x84>
 d82:	a9 f7       	brne	.-22     	; 0xd6e <__ultoa_invert+0x6c>
 d84:	ea cf       	rjmp	.-44     	; 0xd5a <__ultoa_invert+0x58>
 d86:	b4 e0       	ldi	r27, 0x04	; 4
 d88:	a6 95       	lsr	r26
 d8a:	97 95       	ror	r25
 d8c:	87 95       	ror	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	ba 95       	dec	r27
 d94:	c9 f7       	brne	.-14     	; 0xd88 <__ultoa_invert+0x86>
 d96:	00 97       	sbiw	r24, 0x00	; 0
 d98:	61 05       	cpc	r22, r1
 d9a:	71 05       	cpc	r23, r1
 d9c:	08 95       	ret
 d9e:	9b 01       	movw	r18, r22
 da0:	ac 01       	movw	r20, r24
 da2:	0a 2e       	mov	r0, r26
 da4:	06 94       	lsr	r0
 da6:	57 95       	ror	r21
 da8:	47 95       	ror	r20
 daa:	37 95       	ror	r19
 dac:	27 95       	ror	r18
 dae:	ba 95       	dec	r27
 db0:	c9 f7       	brne	.-14     	; 0xda4 <__ultoa_invert+0xa2>
 db2:	62 0f       	add	r22, r18
 db4:	73 1f       	adc	r23, r19
 db6:	84 1f       	adc	r24, r20
 db8:	95 1f       	adc	r25, r21
 dba:	a0 1d       	adc	r26, r0
 dbc:	08 95       	ret

00000dbe <__prologue_saves__>:
 dbe:	2f 92       	push	r2
 dc0:	3f 92       	push	r3
 dc2:	4f 92       	push	r4
 dc4:	5f 92       	push	r5
 dc6:	6f 92       	push	r6
 dc8:	7f 92       	push	r7
 dca:	8f 92       	push	r8
 dcc:	9f 92       	push	r9
 dce:	af 92       	push	r10
 dd0:	bf 92       	push	r11
 dd2:	cf 92       	push	r12
 dd4:	df 92       	push	r13
 dd6:	ef 92       	push	r14
 dd8:	ff 92       	push	r15
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	cd b7       	in	r28, 0x3d	; 61
 de4:	de b7       	in	r29, 0x3e	; 62
 de6:	ca 1b       	sub	r28, r26
 de8:	db 0b       	sbc	r29, r27
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	09 94       	ijmp

00000df6 <__epilogue_restores__>:
 df6:	2a 88       	ldd	r2, Y+18	; 0x12
 df8:	39 88       	ldd	r3, Y+17	; 0x11
 dfa:	48 88       	ldd	r4, Y+16	; 0x10
 dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
 e00:	7d 84       	ldd	r7, Y+13	; 0x0d
 e02:	8c 84       	ldd	r8, Y+12	; 0x0c
 e04:	9b 84       	ldd	r9, Y+11	; 0x0b
 e06:	aa 84       	ldd	r10, Y+10	; 0x0a
 e08:	b9 84       	ldd	r11, Y+9	; 0x09
 e0a:	c8 84       	ldd	r12, Y+8	; 0x08
 e0c:	df 80       	ldd	r13, Y+7	; 0x07
 e0e:	ee 80       	ldd	r14, Y+6	; 0x06
 e10:	fd 80       	ldd	r15, Y+5	; 0x05
 e12:	0c 81       	ldd	r16, Y+4	; 0x04
 e14:	1b 81       	ldd	r17, Y+3	; 0x03
 e16:	aa 81       	ldd	r26, Y+2	; 0x02
 e18:	b9 81       	ldd	r27, Y+1	; 0x01
 e1a:	ce 0f       	add	r28, r30
 e1c:	d1 1d       	adc	r29, r1
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	ed 01       	movw	r28, r26
 e2a:	08 95       	ret

00000e2c <_exit>:
 e2c:	f8 94       	cli

00000e2e <__stop_program>:
 e2e:	ff cf       	rjmp	.-2      	; 0xe2e <__stop_program>
