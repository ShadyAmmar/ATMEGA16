
TIMER_NormalMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000015c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000af  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007a  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000fd  00000000  00000000  00000319  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014a  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
    DDRC = 0xFF;			//output for 7seg
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
  80:	15 ba       	out	0x15, r1	; 21
	/*Timer initialization (Normal Mode)*/
	TCCR0 |= (1<<0); TCCR0 &= ~(1<<1); TCCR0 |= (1<<2);		//clock select: CLK/1024
  82:	83 b7       	in	r24, 0x33	; 51
  84:	81 60       	ori	r24, 0x01	; 1
  86:	83 bf       	out	0x33, r24	; 51
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	83 bf       	out	0x33, r24	; 51
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	84 60       	ori	r24, 0x04	; 4
  92:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<0);										//Overflow Interrupt Enable
  94:	89 b7       	in	r24, 0x39	; 57
  96:	81 60       	ori	r24, 0x01	; 1
  98:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<7);											//Global Interrupt Enable
  9a:	8f b7       	in	r24, 0x3f	; 63
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8f bf       	out	0x3f, r24	; 63
	TCCR0 &= ~(1<<6); TCCR0 &= ~(1<<3);						//mode: Normal Mode
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	83 bf       	out	0x33, r24	; 51
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	83 bf       	out	0x33, r24	; 51
    while (1) 
    {
    }
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x30>

000000ae <__vector_9>:
}

ISR(TIMER0_OVF_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	static unsigned char count = 0;
	if(count<10){
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  be:	8a 30       	cpi	r24, 0x0A	; 10
  c0:	38 f4       	brcc	.+14     	; 0xd0 <__vector_9+0x22>
		PORTC = count;
  c2:	85 bb       	out	0x15, r24	; 21
		count++;
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__vector_9+0x2a>
	}else{
		PORTC = 0;
  d0:	15 ba       	out	0x15, r1	; 21
		count = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
