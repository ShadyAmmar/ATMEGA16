
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ed  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000520  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e7  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028b  00000000  00000000  00002043  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  74:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_vdMyApp>:
#include "BTN.h"

void APP_vdMyApp(void)
{  
	unsigned char state;
	BTN_vdRead();
  7c:	0e 94 4a 00 	call	0x94	; 0x94 <BTN_vdRead>
	state=BTN_u8Getstate();
  80:	0e 94 51 00 	call	0xa2	; 0xa2 <BTN_u8Getstate>
	if (state)
  84:	88 23       	and	r24, r24
  86:	19 f0       	breq	.+6      	; 0x8e <APP_vdMyApp+0x12>
	{
		FAN_vdTurnOn();
  88:	0e 94 9f 00 	call	0x13e	; 0x13e <FAN_vdTurnOn>
  8c:	08 95       	ret
	}
	else if (!state)
	{
		FAN_vdTurnOff();
  8e:	0e 94 a3 00 	call	0x146	; 0x146 <FAN_vdTurnOff>
  92:	08 95       	ret

00000094 <BTN_vdRead>:
unsigned char btnstate;


void BTN_vdRead(void)
{
	btnstate  =  DIO_u8ReadPin('D',0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_u8ReadPin>
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  a0:	08 95       	ret

000000a2 <BTN_u8Getstate>:



int BTN_u8Getstate(void )
{
	switch( btnstate )
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a6:	88 23       	and	r24, r24
  a8:	19 f0       	breq	.+6      	; 0xb0 <BTN_u8Getstate+0xe>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	21 f0       	breq	.+8      	; 0xb6 <BTN_u8Getstate+0x14>
  ae:	06 c0       	rjmp	.+12     	; 0xbc <BTN_u8Getstate+0x1a>
	{
		case 1 :
			return pressed;
		break;
		case 0 : 
			return realsed;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret
		break;
		case 3 :
			return error;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret
int BTN_u8Getstate(void )
{
	switch( btnstate )
	{
		case 1 :
			return pressed;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
		case 3 :
			return error;
		break;
	}
	return pressed;
  c0:	08 95       	ret

000000c2 <DIO_u8ReadPin>:


int DIO_u8ReadPin(unsigned char portregID ,unsigned char pinNO )
{	
	unsigned int temp=0;
	switch(portregID)
  c2:	82 34       	cpi	r24, 0x42	; 66
  c4:	a9 f0       	breq	.+42     	; 0xf0 <DIO_u8ReadPin+0x2e>
  c6:	18 f4       	brcc	.+6      	; 0xce <DIO_u8ReadPin+0xc>
  c8:	81 34       	cpi	r24, 0x41	; 65
  ca:	31 f0       	breq	.+12     	; 0xd8 <DIO_u8ReadPin+0x16>
  cc:	35 c0       	rjmp	.+106    	; 0x138 <DIO_u8ReadPin+0x76>
  ce:	83 34       	cpi	r24, 0x43	; 67
  d0:	d9 f0       	breq	.+54     	; 0x108 <DIO_u8ReadPin+0x46>
  d2:	84 34       	cpi	r24, 0x44	; 68
  d4:	29 f1       	breq	.+74     	; 0x120 <DIO_u8ReadPin+0x5e>
  d6:	30 c0       	rjmp	.+96     	; 0x138 <DIO_u8ReadPin+0x76>
	{
		case 'A' : 
			temp=(PINA &(1<<pinNO));
  d8:	29 b3       	in	r18, 0x19	; 25
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_u8ReadPin+0x22>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_u8ReadPin+0x1e>
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	82 23       	and	r24, r18
  ec:	93 23       	and	r25, r19
			return temp;	             
  ee:	08 95       	ret
		break ;

        case 'B' :
			 temp=(PINB &(1<<pinNO));
  f0:	26 b3       	in	r18, 0x16	; 22
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_u8ReadPin+0x3a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_u8ReadPin+0x36>
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	82 23       	and	r24, r18
 104:	93 23       	and	r25, r19
			 return temp;	             
 106:	08 95       	ret
	    break ;
			   
		case 'C' : 
			temp=(PINC &(1<<pinNO));
 108:	23 b3       	in	r18, 0x13	; 19
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_u8ReadPin+0x52>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_u8ReadPin+0x4e>
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	82 23       	and	r24, r18
 11c:	93 23       	and	r25, r19
			return temp;	             
 11e:	08 95       	ret
	    break;
		
        case 'D' : 
			temp=(PIND &(1<<pinNO));
 120:	20 b3       	in	r18, 0x10	; 16
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8ReadPin+0x6a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8ReadPin+0x66>
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	82 23       	and	r24, r18
 134:	93 23       	and	r25, r19
			return temp;	             
 136:	08 95       	ret
	    break ;
	}
	return temp;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
}
 13c:	08 95       	ret

0000013e <FAN_vdTurnOn>:
ï»¿#include "TIMER.h"

void FAN_vdTurnOn(void)
{
	TIMER_vdSetDutyCycle(50);
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	0e 94 ad 00 	call	0x15a	; 0x15a <TIMER_vdSetDutyCycle>
 144:	08 95       	ret

00000146 <FAN_vdTurnOff>:
}

//*****************************************************************
void FAN_vdTurnOff(void)
{
	TIMER_vdSetDutyCycle(0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 ad 00 	call	0x15a	; 0x15a <TIMER_vdSetDutyCycle>
 14c:	08 95       	ret

0000014e <main>:
#include "APP.h"


int main(void)
{
	TIMER_vdInit(FAST_PWM);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 bc 00 	call	0x178	; 0x178 <TIMER_vdInit>
    while(1)
    {
        APP_vdMyApp();
 154:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_vdMyApp>
 158:	fd cf       	rjmp	.-6      	; 0x154 <main+0x6>

0000015a <TIMER_vdSetDutyCycle>:

unsigned char duty;
//***************************************************************************************
void TIMER_vdSetDutyCycle(unsigned char input)
{
	if(input>=0&&input<=100)
 15a:	85 36       	cpi	r24, 0x65	; 101
 15c:	48 f4       	brcc	.+18     	; 0x170 <TIMER_vdSetDutyCycle+0x16>
	{
		duty=(input*256)/100;
 15e:	98 2f       	mov	r25, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	64 e6       	ldi	r22, 0x64	; 100
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 16a:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <duty>
 16e:	08 95       	ret
	}
	else
		duty=128;		//50% duty cycle
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <duty>
 176:	08 95       	ret

00000178 <TIMER_vdInit>:
}
//***************************************************************************************
void TIMER_vdInit(unsigned char mode)
{
	if(mode == NORMAL)
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	e9 f4       	brne	.+58     	; 0x1b6 <TIMER_vdInit+0x3e>
		
	}
	else if(mode == FAST_PWM)
	{
		//OVERFLOW FOR TIMER 0
		TIMSK=1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	89 bf       	out	0x39, r24	; 57
		DDRB |= (1<<PB3);
 180:	bb 9a       	sbi	0x17, 3	; 23
		
		//50% duty cycle
		OCR0=128;
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	8c bf       	out	0x3c, r24	; 60
		
		//SELECT MODE OF OPREATION(NORMAL / CTC /FAST_PWM /PHASE_CORRECT_PWM)
		TCCR0|=(1<<3);
 186:	83 b7       	in	r24, 0x33	; 51
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	83 bf       	out	0x33, r24	; 51
		TCCR0|=(1<<6);
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	83 bf       	out	0x33, r24	; 51
		
		//TIMER CLK TO 1KHZ
		TCCR0|=(1<<0);
 192:	83 b7       	in	r24, 0x33	; 51
 194:	81 60       	ori	r24, 0x01	; 1
 196:	83 bf       	out	0x33, r24	; 51
		TCCR0&=~(1<<1);
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	8d 7f       	andi	r24, 0xFD	; 253
 19c:	83 bf       	out	0x33, r24	; 51
		TCCR0|=(1<<2);
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	83 bf       	out	0x33, r24	; 51
		
		//CHOOSE THE MODE OF FAST_PWM (INVERTING /NON_INVERTING)
		TCCR0&=~(1<<4);
 1a4:	83 b7       	in	r24, 0x33	; 51
 1a6:	8f 7e       	andi	r24, 0xEF	; 239
 1a8:	83 bf       	out	0x33, r24	; 51
		TCCR0|=(1<<5);
 1aa:	83 b7       	in	r24, 0x33	; 51
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	83 bf       	out	0x33, r24	; 51
		
		//GLOBAL INTERUPT ENABLE
		SREG |=(1<<7);
 1b0:	8f b7       	in	r24, 0x3f	; 63
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8f bf       	out	0x3f, r24	; 63
 1b6:	08 95       	ret

000001b8 <__vector_9>:
		
	}
}
//***************************************************************************************
ISR(TIMER0_OVF_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
	OCR0 = duty;
 1c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
 1c8:	8c bf       	out	0x3c, r24	; 60
}
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__divmodhi4>:
 1d6:	97 fb       	bst	r25, 7
 1d8:	07 2e       	mov	r0, r23
 1da:	16 f4       	brtc	.+4      	; 0x1e0 <__divmodhi4+0xa>
 1dc:	00 94       	com	r0
 1de:	07 d0       	rcall	.+14     	; 0x1ee <__divmodhi4_neg1>
 1e0:	77 fd       	sbrc	r23, 7
 1e2:	09 d0       	rcall	.+18     	; 0x1f6 <__divmodhi4_neg2>
 1e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__udivmodhi4>
 1e8:	07 fc       	sbrc	r0, 7
 1ea:	05 d0       	rcall	.+10     	; 0x1f6 <__divmodhi4_neg2>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__divmodhi4_exit>

000001ee <__divmodhi4_neg1>:
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <__divmodhi4_neg2>:
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255

000001fc <__divmodhi4_exit>:
 1fc:	08 95       	ret

000001fe <__udivmodhi4>:
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	51 e1       	ldi	r21, 0x11	; 17
 204:	07 c0       	rjmp	.+14     	; 0x214 <__udivmodhi4_ep>

00000206 <__udivmodhi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a6 17       	cp	r26, r22
 20c:	b7 07       	cpc	r27, r23
 20e:	10 f0       	brcs	.+4      	; 0x214 <__udivmodhi4_ep>
 210:	a6 1b       	sub	r26, r22
 212:	b7 0b       	sbc	r27, r23

00000214 <__udivmodhi4_ep>:
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	5a 95       	dec	r21
 21a:	a9 f7       	brne	.-22     	; 0x206 <__udivmodhi4_loop>
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
