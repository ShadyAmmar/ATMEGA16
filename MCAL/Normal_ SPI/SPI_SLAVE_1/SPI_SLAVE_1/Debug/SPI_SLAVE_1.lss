
SPI_SLAVE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a63  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000550  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000373  00000000  00000000  0000203b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000023ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  74:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_vdMyApp>:
#include "util/delay.h"

void APP_vdMyApp(void)
{  
	unsigned char x;
	x=SPI_u8Recev();
  7c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SPI_u8Recev>
	if (x == 49)
  80:	81 33       	cpi	r24, 0x31	; 49
  82:	29 f4       	brne	.+10     	; 0x8e <APP_vdMyApp+0x12>
	{
		LED_vdTurnOn('C',0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	83 e4       	ldi	r24, 0x43	; 67
  88:	0e 94 c3 00 	call	0x186	; 0x186 <LED_vdTurnOn>
  8c:	08 95       	ret
	}
	else if (x == 48)
  8e:	80 33       	cpi	r24, 0x30	; 48
  90:	21 f4       	brne	.+8      	; 0x9a <APP_vdMyApp+0x1e>
	{
		LED_vdTurnOff('C',0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	83 e4       	ldi	r24, 0x43	; 67
  96:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_vdTurnOff>
  9a:	08 95       	ret

0000009c <DIO_vdInit>:
		temp=(PIND &(1<<pinNO));
		return temp;
		break ;
	}
	return temp;
}
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	84 bb       	out	0x14, r24	; 20
  a4:	08 95       	ret

000000a6 <DIO_vdWritePin>:



void DIO_vdWritePin(unsigned char portregID, unsigned char pinNO ,unsigned char value_1)
{
	switch(portregID)
  a6:	82 34       	cpi	r24, 0x42	; 66
  a8:	19 f1       	breq	.+70     	; 0xf0 <DIO_vdWritePin+0x4a>
  aa:	18 f4       	brcc	.+6      	; 0xb2 <DIO_vdWritePin+0xc>
  ac:	81 34       	cpi	r24, 0x41	; 65
  ae:	39 f0       	breq	.+14     	; 0xbe <DIO_vdWritePin+0x18>
  b0:	08 95       	ret
  b2:	83 34       	cpi	r24, 0x43	; 67
  b4:	b1 f1       	breq	.+108    	; 0x122 <DIO_vdWritePin+0x7c>
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vdWritePin+0x16>
  ba:	4c c0       	rjmp	.+152    	; 0x154 <DIO_vdWritePin+0xae>
  bc:	08 95       	ret
	{
		case 'A' :
		if(value_1)
  be:	44 23       	and	r20, r20
  c0:	59 f0       	breq	.+22     	; 0xd8 <DIO_vdWritePin+0x32>
		PORTA|=(1<<pinNO);
  c2:	2b b3       	in	r18, 0x1b	; 27
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_vdWritePin+0x28>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_vdWritePin+0x24>
  d2:	82 2b       	or	r24, r18
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
		else
		PORTA&=~(1<<pinNO);
  d8:	2b b3       	in	r18, 0x1b	; 27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_vdWritePin+0x3e>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_vdWritePin+0x3a>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	08 95       	ret
		break ;
		case 'B' :
		if(value_1)
  f0:	44 23       	and	r20, r20
  f2:	59 f0       	breq	.+22     	; 0x10a <DIO_vdWritePin+0x64>
		PORTB|=(1<<pinNO);
  f4:	28 b3       	in	r18, 0x18	; 24
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vdWritePin+0x5a>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vdWritePin+0x56>
 104:	82 2b       	or	r24, r18
 106:	88 bb       	out	0x18, r24	; 24
 108:	08 95       	ret
		else
		PORTB&=~(1<<pinNO);
 10a:	28 b3       	in	r18, 0x18	; 24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vdWritePin+0x70>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vdWritePin+0x6c>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		break ;
		case 'C' :
		if(value_1)
 122:	44 23       	and	r20, r20
 124:	59 f0       	breq	.+22     	; 0x13c <DIO_vdWritePin+0x96>
		PORTC|=(1<<pinNO);
 126:	25 b3       	in	r18, 0x15	; 21
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vdWritePin+0x8c>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vdWritePin+0x88>
 136:	82 2b       	or	r24, r18
 138:	85 bb       	out	0x15, r24	; 21
 13a:	08 95       	ret
		else
		PORTC&=~(1<<pinNO);
 13c:	25 b3       	in	r18, 0x15	; 21
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_vdWritePin+0xa2>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_vdWritePin+0x9e>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	85 bb       	out	0x15, r24	; 21
 152:	08 95       	ret
		break ;
		case 'D' :
		if(value_1)
 154:	44 23       	and	r20, r20
 156:	59 f0       	breq	.+22     	; 0x16e <DIO_vdWritePin+0xc8>
		PORTD|=(1<<pinNO);
 158:	22 b3       	in	r18, 0x12	; 18
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_vdWritePin+0xbe>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_vdWritePin+0xba>
 168:	82 2b       	or	r24, r18
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	08 95       	ret
		else
		PORTD&=~(1<<pinNO);
 16e:	22 b3       	in	r18, 0x12	; 18
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_vdWritePin+0xd4>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_vdWritePin+0xd0>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <LED_vdTurnOn>:
#include "DIO.h"

//*************************************************************************
void LED_vdTurnOn(unsigned char port_ID , unsigned char pin_no)
{
	 DIO_vdWritePin(port_ID,pin_no, 1);
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vdWritePin>
 18c:	08 95       	ret

0000018e <LED_vdTurnOff>:
}

//*************************************************************************
void LED_vdTurnOff(unsigned char port_ID , unsigned char pin_no)
{
	DIO_vdWritePin(port_ID,pin_no, 0);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vdWritePin>
 194:	08 95       	ret

00000196 <SPI_vdInit>:
	{
		// Start transmission
		SPDR = data;
		
		// Wait for transmission complete
		while(!(SPSR & (1<<SPIF)))
 196:	18 ba       	out	0x18, r1	; 24
 198:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	41 f4       	brne	.+16     	; 0x1b0 <SPI_vdInit+0x1a>
 1a0:	87 b3       	in	r24, 0x17	; 23
 1a2:	80 6b       	ori	r24, 0xB0	; 176
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	c4 9a       	sbi	0x18, 4	; 24
 1a8:	1e b8       	out	0x0e, r1	; 14
 1aa:	81 e5       	ldi	r24, 0x51	; 81
 1ac:	8d b9       	out	0x0d, r24	; 13
 1ae:	08 95       	ret
 1b0:	be 9a       	sbi	0x17, 6	; 23
 1b2:	87 b3       	in	r24, 0x17	; 23
 1b4:	8f 74       	andi	r24, 0x4F	; 79
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	1e b8       	out	0x0e, r1	; 14
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	8d b9       	out	0x0d, r24	; 13
 1be:	08 95       	ret

000001c0 <SPI_u8Recev>:
	}
}
//*****************************************************************
unsigned char SPI_u8Recev(void)
{
	if(mode ==MASTER)
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <SPI_u8Recev+0x10>
	{
		/* Wait for reception complete */
		while(!(SPSR & (1<<SPIF)))
 1c8:	77 9b       	sbis	0x0e, 7	; 14
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <SPI_u8Recev+0x8>
		;
		// Return data register
		return SPDR;
 1cc:	8f b1       	in	r24, 0x0f	; 15
 1ce:	08 95       	ret
	}
	else
	{
		/* Wait for reception complete */
		while(!(SPSR & (1<<SPIF)))
 1d0:	77 9b       	sbis	0x0e, 7	; 14
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <SPI_u8Recev+0x10>
		;
		// Return data register
		return SPDR;
 1d4:	8f b1       	in	r24, 0x0f	; 15
		
	}
}
 1d6:	08 95       	ret

000001d8 <main>:
#include "LCD.h"
#include "LED.h"

int main(void)
{
	DIO_vdInit();
 1d8:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_vdInit>
	SPI_vdInit(SLAVE);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 cb 00 	call	0x196	; 0x196 <SPI_vdInit>
	while(1)
	{
		APP_vdMyApp();
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_vdMyApp>
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <main+0xa>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
